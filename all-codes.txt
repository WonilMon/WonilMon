===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\.gitignore =====
node_modules
.expo
.expo-shared
.env
.DS_Store


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\app.config.js =====
// app.config.js

export default {
  expo: {
    name: 'BandHand',
    slug: 'bandhand-app',
    version: '1.0.0',
    sdkVersion: '53.0.0',
    extra: {
    },
    ios: {
      infoPlist: {
        NSPhotoLibraryUsageDescription:
          'プロフィール画像を選択するためにフォトライブラリへのアクセスが必要です。',
      },
    },
  },
};


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\App.js =====
// App.js
import React from 'react';
import RootNavigator from './src/navigation/AuthStack';

export default function App() {
  return <RootNavigator />;
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\app.json =====
{
  "expo": {
    "name": "bandhand",
    "slug": "snack-164f8f59-1ff8-48f5-b109-ae8ba0d00cda",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "newArchEnabled": true,
    "splash": {
      "image": "./assets/splash-icon.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "edgeToEdgeEnabled": true
    },
    "web": {
      "favicon": "./assets/favicon.png"
    }
  }
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\index.js =====
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\package.json =====
{
  "license": "0BSD",
  "main": "index.js",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "expo": "~53.0.12",
    "expo-status-bar": "~2.2.3",
    "react": "19.0.0",
    "react-native": "0.79.4",
    "@react-native-async-storage/async-storage": "2.1.2",
    "@react-native-community/datetimepicker": "8.3.0",
    "@react-native-picker/picker": "2.11.0",
    "@react-navigation/drawer": "^7.4.1",
    "@react-navigation/native": "^7.1.10",
    "@react-navigation/native-stack": "^7.3.14",
    "@react-navigation/stack": "^7.3.3",
    "@supabase/supabase-js": "^2.49.9",
    "date-fns": "*",
    "expo-image-picker": "~16.1.4",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-modal-datetime-picker": "^18.0.0",
    "react-native-picker-select": "^9.3.1",
    "react-native-reanimated": "~3.17.4",
    "react-native-safe-area-context": "5.4.0",
    "react-native-screens": "~4.11.1",
    "react-native-vector-icons": "*",
    "zustand": "^5.0.5",
    "expo-constants": "~17.1.6",
    "immer": "9.0.21",
    "@types/react": "18.2.47",
    "use-sync-external-store": "1.2.0"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0"
  },
  "private": true
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\assets\adaptive-icon.png =====
�PNG

   
IHDR         H�۱   �PLTE   �������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������N�s   =tRNS � 0@`o��������P��_���PϠ� �p����������p�������`�o�pPpO0`��{V�  CFIDATx��	  �0�_Z��aO0�T�5�����U����TT���*�QQ�?*��GE�����U����T�T����TT���*�QQ�?*��GE�����U����TT���*�QQ[���*�QQ�?*��GE�����U����TT���*�QQ�?*��GEm�?*��GE�����U����TT���*�QQ�?*��GE�����������U����TT���*�QQ�?*��GE�����U����T�V����TT���*�QQ�?*��GE�����U����TT���*�QQ����*�QQ�?*��GE�����U����TT���*�QQ�?*��GEm�?*��GE�����U����TT���*�QQ�?*��GE�����������U����TT���*�QQ�?*��GE�����U����T�V����TT���*�QQ�?*��GE�����U����TT���*�QQ[���*�QQ�?*��GE�����U����TT���*�QQ�?*��GEm�?*��GE�����U����TT���*�QQ�?*��GE�����5F�����U����TT���*�QQ�?*��GE�����U�����U����TT���*�QQ�?*��GE�����U����س�H�(��@������=d�Ai��3�u7���� 9 � I�$@�+ϿQQ�������?*�쏊*��������?*�쏊*��������?*�-�?*�쏊*��������?*�쏊*��������?*�쏊z�쏊*��������?*�쏊*��������?*�쏊*�������������8��r.��O�/�j�s)%��}w�O�@]�e�y�����ZJ��Я>�[Q Եc���^���< �����yj�4�-.�pA��ڏi���r�� d���!����-�p&�@]��k;�OW�8�� ��c*S;����8�� �vc��B=�� �: �]�S�`���y ;Qe�O�c���=�z �����J�A%��Re�윇��8���d�"��c��9����9����d���[����Z�d߸�������h����ߪ���1���&;�m�o	
`Ax���v��9k��n����l߆�1�B@x����7V�y�*s�Z_NV��( ��-�?q�����$a��q�?��$�4
 ��_�������b@�( ϟ���O�iQ�Ɲ'P�r
0V�?�b�{_S$�ƍ_5� F��7{_��o�#Eg���r�r����o�?����dR5��:d
 ����Ũ��Lz��M;n+����~���P����Nc�	* ���J���W������ ��Oz���Г�jΡ��P+ ���O��^���y�T���@�P ����۩gL�w��3�  <[��~�oU�� V* `���Գ�ڻ0 �� �m��u��o�C� �U ����5kJ�x3  X� ����:Z[��=�?  �, �v��̬3U}��  �[ ���o�7U���  �- �v��̬=U}.��( `� n�G�!�ކ' �� ���o��Iն����
 0��޼�T�� �
 0E������g� V& @��k�ȩ��0|   �H  5>������<� �" `��C��S�
 �
 ��q�:��J O/ �����# W �s ��~�#U�S �V �*JV��T�!�R ��
 �f���vh �� `�G��ǒU0 ��	 ��=RR�L �% �3��'?H�o��� �� �����,R}d�	 <� �Ͼz|�T;_2�� �)�P^�9!�7��� H_�|���?RՁ_  ���u��?H��T�[B��,�j��G����F��+�z�o��T�,L�j�B��*u�TT��T�VSBe��H�q��"�F� �1���*p)�JH x����G�oU_$�
  ��R���[|�T�B��_�(վHx   T�,��� ���%�
  j�,Q��J��H H��Ϗs[E����   ����h�g|�:�՟���
�T��N���_�KX��۴  B�=s�'e?��˧����j,!Ԧ�DU���'���m�</��Ç�����?��b�gg�Iw]�eHe   Tڗ��WJ�*�����/'�W�n㌦�
�����V�$N��o	Y%m7y��7����PB`}�A  �P��_�ӰJ�f�匪�l�)�>D��  ���'���[%��R�s&����?
  *3��Ķ�lV���Z�.�.�( @�W~Ϫq;_.&�s&^���+ju!!T*�ӿhV�+|��|�t���
B� ����ƲJ6�e4�]�b���  Be��Ǫi�2����)�na  ��~z�*�ܗ�(��`��ǁ  B5�?�_�*�iiW����x٢V�e��[⭦��>���fc�1Z)E��JJ)c����aߞ|z`R�+�F� K����U��S��tȜ�jJ��]�o'� �.[ �(�A� ����U��i�ﬦ��J���Ɓ��E�[�   Bm���Jf���j�T�q�S9V�V��'    �����j�r�N�I$U�Χx[�A�:�    ���RV�����3$�*��(ˀa��<   ���ۿ�V�~L��Z*Um�a�2��0r   ��Z�*��~�N-��v#�#�z��J�    ����Vǯ�O��������j��]�    ����KXU���꧸�����$WK@'A    �����:b���RH��g/� ު0   ��!���|f(�T�1 ��Ve    
���VM!��M�x.o�0�V4    ��i��ۿ��f�dۛPrV    |��&k�v���RN�w��,@تe    �/fU�o��3�j�2୊    ���J�rPUGϑjo� x��   ���)�����&F�ˀ�FԪ��B   `���U;����gK�?����20   �g�_ʪ)1S%;� -e�!��  �Y~��79��,�����0r%d�!@P   0C�wrV/���S5��(@����    b�_Ȫ	b�?U}��Y��O�  `�
��E��U����! WVY �4 W���:���1j�,�   �@��UUDh���dU(!��   ������i����0P���^   �z�$cU���jy%c��~    ��@"V����t�v<�T=   ����KXx��JS�5
,�����  ����y���V���J߲��Z�j�*�   L> �Z�*�KFa5ը��\	X�~�^   ���V
��0UFԱ�3V��    P�UW
X��]��/վ*5V��G   � t�[��?����J�o�ㄣ    x՜��V
7��Sz�F8���O�   ���@3[��~?�D��V)��*    , 8�UUD?��&�(ԬV���   �
 ��V5���&�T�/��۪y5T   0f���m�����S�_|7����  ����_�z��� �O!_��q��   ����٪bξ�>�T��	���V�;k   P� p����K0���O����>    �Vk��} x8�l�j�1    ��n^�
����  �V�|��k�rc    �� pF�����.���m�u^���    ����y-W�Ag)S���!8�����vi9]�����2=�gF#	3D�Ժ|?� >/~�L�u��4�   ,�Q
L�n�y�_ �h7�qL�0X
 �%z˔���� �@��n�-1  ��$J�S��) �]S��3�⤷   ��aÔ��i�߮�5�D�u�wz �� Qj��
��U�F@K�:TX i��ai��Oú<N�>[���,?Ƚ�����2B�?}���N������/�	����秖V�H��\�8^��D ��0)4����T���̐ ��_> T �ӈ�OH.�Q���VE�� P`�7���A��[qo�p�@�������J[���Ѥ�^�� ��k,.�x/��c�*c={9 I*��h  ��
K���V=|� ��̱@ �q�������e�٠;�T,�H  46Wt<0�_ �	���:���(  t&@�r�_ �	p��<Y� �� +� � �IbQ�  lM
 W��_ �p�%E@  h��� � �3)��   @�f�/ �Hd0 ��"N�-9��dg4RY�0� �U�I�� � {&�e@TV�Z̃w~� |�c`� �U7�S:o�W 09peQ Y����	��G @0�w�
��H��� ��oV	 6���@V5� ��y� ̧,��K�� �U{����J �'CJ�>� �U��c��4 �8��
豵  D`Ւ���� y��V �X
 1Xu�߫w��u����1���@�V�-@��]* H�3h�� p�B�L _����K�F`�u� �U��Ӡ� 6R�o�p�V`- nՎ��C�F�_ ��韯 ��*��{
�, ̤�\�c
  lU~ 
�) �N�6 �X ![�U��z�  L��
L�`�ڳg�䤉 `,u�y� ��*��~H� k�C�� �@ Ԫ={�c��K% c���2�S  P�:��ƻL ����/k P�� ����	 �RK�� 
� @�V�' ��  �b�$�rc- iUv��TT XIjN��@ Ϫ����`� �I=$� Z���\ ��� �(�)� �U!  � ��Th\�S  ,��n��� �J���{b
  gUr��� ��T��EN�ЬJN 6�( �,u��W,~� �*7��) ֖:���V B�j�M f|Z@ X]*3�D@. dU������  �.�/2n
  cU��q�v��� V�
E@�M2  ��ԛ 7�� �{g��6���9(JI#��vd��ٻ�UO.,;������g����AQ��ȿY�U�py��?	��� ���j�3;���`%u��� 	�5@m�ڡ�ӻ;  #�=Z�JQ� ���Dξb+�f�w ���7��kq�gI��>�Kk��[o���O�>���>�ð��71�� ��JQ!V  0eo�
�����|�4�����:�v���N U@c��>.�H5��:�����:@�P�ʯ�� ��������n6�X4��M��ѭ��(: �@֜�̵�?�
�_Ckw �y�4鏵  �x�)g��Oq3���ۛ��}����m ���Фb���4bc�Ɗ`O� Zl � i-�d����گq��V@����"5 ��t��ۂu�?�Ň�1ߦ:�'O��&���5>$���A<5:@�Č,� @T� ����q��F[�C �� � �h��  �j0��L�>� �4m �$�� �T��?��o}��U��RC��~�����'3����#C�A�Ʀ� �d��@�T��?}٬��ϥ����&3;� � R<7
 �8�B R
���M�����Ꮒ�!T� �8� �L�- �a����r��O�����!�
 � �Q��� �h� b=�Ow?	٧�:�K]����qW�h��2`�0  �.�X ����1�d�w�~���
JR�8�� ���q! ��?�xz�։�����y � ��+�GZ�@
���Z��Q�?=$�.�l�T  r��� �\�o�a�0�h��j��
D*0�S?  ���F@���L?����|�Ձx8s��4
 �d  ��?=�`A^~�W]~���T��s�>�� c���`��?�����9T� J��m������T���]��Z���W ��r � � h,ng�������>L� 	�L`�$  3�����揢�x�+V�s0w m�� C� p �(��ŭ��������KE�z���   �hcqk��ND�˥��.���k8`�_� �`�2 ��W����`�D�*��;�6��s @3 �2���Cwv�����@�2� ����� �� :���-hk�r�? ��� ��S��`��5 ȴ���ЌJ�._����4`k� |P̾u 4�,��J���O��~/�qDj:��4'K�2�#9: Z@ĒAm+hh�4��?$�$  5ae@� @c ���)�'��y�}U 
  H^'�7h� h �oX5�����yV���R����@ˀ=�� h I�-�������_�|��J  5I�{ 9 ���&�P&��R���Z>( R�F�:��� T@�oR��?��WE	pg� ��
�m M@mGf �T`������  R�m?*���� �00J-���7��iU`��Qǭ������ d=JT��?L��ǥ�#�qe� �-�'� 
`�{�L�3����祾'@F@� �C[@; �y�c������_.� �l� g*��d�f �Jy�f �T`����p5��9 _p ��N�
e 6�_��2��^�W�X0�I @# 8輅2 ��	��/��\
:^*��E { 8 rA��k,N�?e��_�T�DPNR�@H� ��?0K$Q �. �~��Z>��e ��=�S&@ Ћ �M�[�Y�!e�r���ō��3�BH�"��
 �
n���H�O � ,�*�KMT_�As	@ P�1��RKv!KH�RH�I�� �@�O�v� �T`+ુ��
�,�c
  T�)(%�ʥB	���X-nrL���"�r 4�3T6;�=�o��R����R'(
�e@ �C� �S ��;� `媋�"&��_N��	 �
md���* @*Q�ɶ'\�9 �@�֞�	�5�Y|U�5����
�z29 �����ow�Y� �T 	8^*�XN�� 8Cg6}�@���I�gӗa2T	:;  ����ӗ��  R�$ ��
�*��V (��@�Tr�,-@������6�M� �uǠ@ؿ�� �j�! +(T �@
��~}�T`0|U�8��Ke� �Y@K 8 �%d�D����W -\5� �T�Dx�T�P7 �o�E�KϪ�V �@%c�� ���7��0��@O��_��! -�~��P9 f���C�������Jj�&��� �П�#R�usi �� �Ԃ����� ����k���� ^*�Re�f-X9 ��m qo�� �T �Ԃ�=��}w T h�?�I5  �P��
'���P7 ��=S실2�g��� ��J����W ; ���lL�+��  R��gLjA���� 0 P�a�@����m^*��1\Tjb�ZWv T
�T0s��C���ՂU,����pP}�P5 "��:�E��k �}a��G����P5 �f.PJ���k�֮:P.�z�r
�� �
 =o�2�@Ƽ� � R���� 0  h+�<�J2��: � P+���'�[�% �]@�o��Iax�T�(��6@A �� � 3Rq��#b�g�X �e9  5��Av T
 �z�Z��k@*{���l,�I8 ���|�M��%gUV��  ��Th@�� � �1{�ଊ|�JE�7GR*���� � �@
���@ٿ�3 X*��T {v�  ��Tx��x�d0 R�v �� � �/H����� �
��J��@M�w  ;����O�R�� RK����k� � ��+��	��<� ���J���� � �5� �Ԛ6��g/�$$4�@�k����?eS1 4�I�Բc�@� ��̀D�d�W	 �[��;�P �M�H^�o �ޜY�@���  �	��{$\� �g���;��P- ^y�'@*pެq h,��%��$8   ��������R��x��I M
 v  :��p?S  /- R��?N` @d�qc�3B/V�A��w�98 � v�� 'D�! ���k7!��  =R�ڂR�& `�,Rٵ�q, 8 �#|Pa�V�g��
�B��� Ƹ���+�b��b� ��/W��~ �r@iu{� p |ɷ�C�� #���ԅ�� x\D��>�> �&W����@�o
 @��j�  2+�x��� �B�� T��}  �+< �;E { ��>�`Ģw͹i  �8 �� p \*Pyh o  ,�0  �G; �� ���> �K�  �#�+*�N� XL `� ������U{ �� �����+���:�_u�\;   ��� p 8   ���� p�8   @�÷SU_��
����� ��p ��p ���M ���ۀs×���T ��}8 ������ � @=� ���=}8 N���}S �8b�r x[������ط��/�=3��w=5~�} 8 ^~,_# f���� ���[͵ x��_���?���৿  b�����?#�(��   �bM������.�{�^��i4)(��e �Y@��ZuB�[���x DD�� d������`� �$�Z�C�j�]�29�v�> L��J��
�H8   l�BN��?�� 5�U>* x�H$   �~W
x�g�`�K�����zĬ��� p�nfM�6���fg�T*&��v ��*���|^�Q��@�|9���R�� ��4�`rqUV�1] 4����#QUj �� �7i]�n�r] xV��wY`*	   �;����_�o� 'MoL:-~�/: *��w&�̒\? x��R��`
 ��H����� ��@��� C  5�mx���W� � I� �� �� �r�Z����Ach^*w��,� � x608f
`��j ��MH�� '��� �N~
2	��q���T>��T�2�����8�"�����
DT��
4Y�o��� |.pX��' @�������D{ 8 $Xc,��9��Z �l2RG���X5  ��S���Od�KjhGFjA�YӪ� 80/�����p ��R�M!��=  b+h��Z�� �Z��Ծ���*v p t̧�T*�|� ����H�jG@�) �� �6 o�Q0�R%�- ���/P?Ӫ� H�{l@�9�p
 
J����e�)�= ��=�v�T`��� ���z�F��3 { @�{���g(�%�[FjA
p��  �x*�2�O��H�� s�m�ɽ{ 8 �}@�\eJjAp�: $ �"R����9��  �(U� H-��cj  ��E���Y�� `�������� ��g��U� p P/�
�#d�8RU R* DHjA.���1l�� H�
�g �� �T  ��(��� p @= $~L�Ԃ � 
 n/,�9S������K���-+�
� C� ��#�R����M { 8 :��؝�
� ��+ 8�=�}�&@� p �
���u �,��Q � ��:@��L�  5�|'� ���]A  J�������: �����DNjAp-@+�;Nj��]���� |7��R�`h C�!@Pj/�t+�` �@���^���� ��-/( �  ���%o�e�$�5 �\ �RU�L�~ 8 �>0�;/�U=� R����R��,' sW�LP~gs�Y��&m`-����DP� � 8@ٟ�ӅJ-�CK ��[Lj��P-� 8 ڙ���ZP�� �����R_5�j��� ���\=*��9��� �]�奞)�E�	 8 ��(��e|m k2P�%��QQ�}i��_��ʕҏ�6 F[��6i  m��>�R�9� ����@jm�Z�  z��,f��(cn 3� H����D{ 8 ��MA��da�SA8m�'U���T� 6T	`�  �(���LK-�P�j�����.V �Qn  ��u�L�L�V #�`�O�y8SU�m3 p H �����G�5�v��h"5`YӤ�  �����?�:V�`5���Fj�K̿j  !w�� �T��~\�
��lZ R�@���  ^8Upt�<x���^�� �$o�TG���
{#��&� *�V)@V*� ME��  � |�ۿy�T~��7V��@O R}�\�`9@�������T��?>T�0Ė�}������W�
 "�׺ ��?$��E���% 8 :��,�3�G�L /�n6 �hl�B�����/�T� O� ����t؛J|[hh8 �fe(H���9���^��X7��h ���T�Jv�O��Y5 `����d� {�LO�5 @�JAg�)�Ư� XO�������� � ~o�ޜ�H	�l��F`��R3uLP�K���󄓔M��m� Pj�#P��v�! Aɶ9 8 �@(�T F@ H]O��G�ؽ�W�%�� a�A�U����1 �ὖS�Y;s�M� ��ojpH�	�o- ����K=pǥg�Mh  ��,��~�� �
,�ӿ� p/�AI� p ,\��O!R�� 2�.
�t������[C5,�[Z����%�dm�e�<�Pj�A�b� "k�2���
@����2`�H*Ty !5�� ��@Ru��� �&� �\ ?�+���4~0����p?ӣ�h �`�$  �x��
 �Ԃ����v���w��� �[��Nc9Tj���?�� ��������ܱ
�w�X�_UsӍ�  �X� 4�)�&�:�Ə�p���a�x�: �'��q�@gm$C \*�yȯtߟ��R����J�,  Q
	� �T(�0 1_5���Gc�jq�|F]>�) 8 d؝`�\4F\*���(���a4r���5 �2��
 � �� J�Iʥ���~�C��2 <KGن� H:i���c��y��ys��s��f�i���.9@ ���a 8 4HdP������1ooV^j�6��󱋖  @_��� 8k4� ����R��iجc���p�����ӟw 4 ���M���qO0�R� c���&��-��BXŮ뷟?���?� | �ǾS� p ��c$C��:�w_F~�ӟw 4 xU��
 � C�c����P��� ��96 �m煆 5�9�l`ǴYjt�;2 H��y��Ѓe@��c����We�u���H ����� �n|���+>�6�V8�΅,.u� t�B�1�k�x����[��"ژ�U�  Z�`��������f�hk"�e�= �2��G}��r��~����X�t#0e�� v (��_>�nVo�t�),
~�ܧ� d`���: �@�K��RΧ&��z�Q ��15� 4 P�/�������X Ռ�ݗ?�����;�J��� ��
 �7phn��!ޯ��v�/9���y��m��bh��̹�pi  �Ϗ}��o���K�c'z�	�
]���;�V�18 ���u�t �h`ʦ�[���J��V �'��z\��A;[�� ��ڍ�������`���=�s�18 ,��&�9@�����ꀃ�Bꁭ jf�vU_�� eM ���.(�)�����!@|�8 .*5d��@�W�U x�]��qp \Zꀵ^w ���^�I� �e���# @ � ��U{50Y2�$�p�a�qk 8 �w�D� �c��pI��L � �P���!��I���rR��@��� ���D@'ct \J�
� t���YhG��@4T�Q�|ܔ�ʸP��_{L;��уx��9Y�֒�	�?T�[ B0,��jAO p�� ��P�o 	���jMO p�� ��P�omI� �OX��	 n �~�jh��|'�*��*   �4T��F �N�� ��B �@ �k���{# /[+ x[���w�.* ��*@; �V�F�Ɵ.. ��*@;�[����w�	�pQ�ǡ�󽿯�IK��ꋱO �Z�I�ߪ vIVAP��ՋK<u!��" �:T��t��3����% 6 @�C�{;�n �7X ��x1 ��#� @`* xX�: p�� ��P��>��llIs��|n� ��ު P�h?~7�� �^lY���6 @�Zc7�R�� �U�Q �Y {I�U���������"���*� i��1�
�WA �)D� ���I�
 <
�?Ԭ
 K�5���`�� �J�na�>?� �C �lY?dmBUA H%TC�: E# c3��Z�� �N�n��ԉ-� �\�?��v��B���QO| �yt �ۤު PR�+�
-� @gN�U� 
 i���9D. \�q���EbX `�o�F �?��xlb  �X�r��G  ��%m�F� �  ꀷ4� @g��'�%x�" ��$m�  t�fY-� 
 �ի� 	`iN!� �hN�ZCcA�  B�I�)� @g�)Xe� �Dު ��|��|� c�����AP�	  �j�թ}�^� �4�Y��I @h<��|�  |���NxV;N� ЃP=�H��� �Q�@'<��A@� ��ֹ�]�9OS]]�҇tq������8$�� �f\	�KЋ�������t
���$��s�]]����ak� �$�o�:s%�4��՗v��M (	8ω���C:���6�( @3�7_�+���Ž���� P�ǀ�	��V�ǏuXF5Xe� .4p- �N�������[`�vWiYR��-  k��?�ZDCu�:�
h���L  �$�˳�� m! ���P�ju� �w�X`Z
���� ��*j/��B / � �#p�N�P�  7�Q��W����y`��+Q�-t	��n��n�i��9j�nD��#8�P�I �[�b�1��$F7r�k�6� �I�����L�m ��7F���� �^!�9jp�� �!��#G��ǃ   ���N�5TĨ JbTaܨ��Z� �>�F��91�Տ.�����Q�O��[kH�߾�ѣ>��, ��y��A�@  {���Q�#��W ���ѣ6�   �}���QCI�B<� �8>�U��'   �X�?jGW?� ��8�Ǐ*\�  0������,�b���;*��n��B 	�@e���"��K �!�	��4�G� ���5EԎz���@����Q��/C ��灨IU9ꡱ�! �PN���< �  �����SD
��Տ ���Z�"j=� �@'�DՆz(�F[��7�I�J�
C ��/D
%�Q�-�^�RDe/ �
�
��D�i�vԇk6+ ۘ��?AT���B �=�*�&jpԇ��) ���Q���&[� &xP������i{�����Q+��G�! ��
(RE
%�R�
�_�!U��~ @ ����,�v�K!��j|��s����/   ��zG�,j���
�Q�_zo�Em>e@ �� ��JS�\}���w*]Ԇ��
  �7@����~J��V��o�tQ��;@ o}H?$�.��ӷ�|���	���[�U`�)�JW�]c��q���Q��� ���NU�P���jCL�2*�#�?�`��*�H�3�PkjU��t6eT���_��������F
��j��VmSQ��6mT���?�`��v� 	�(�
��VUk(JG���B �4`Q(�ebɭ���x�:j|�!  �D��^���2[�YI�֟G�d�! ��IUyz�b��V�*���������  ��HU^�%L�_P�V円�?q�f��� �_�Gn�	��
9���*?�sZ5� 4�g�!  ��Ee
`j1o�6+̀��0� ���� �7@Ҩ��� U��jU�
`:;� \��? pSE�g�29u����9~�?�� ���TQՅ�q�ZNժ�
Côj��U���   n '&���0e�l�V���,��l ���l�Ԏ`¨��FUd*I�VfEE��Մ �@ @N5~�����*�Y�D�Ruv��f��� P*3 ��FUG�c��n/�[Z�RgEe�vL���z��� P*7@3u�[�<�+�V��Y>��Ӫ�����@�� �ɣZ��]��<���J)!��OT+��Ji��E�d���v��N�� J����>*w@B���x���I�@�'�_��tq��Q�9@8�DaVӂR�cP3EU��f�wj�P���������-jЭ��ԯ�l��8.`V!�Yp�3�̼��?�s��%�fu
P�-��y���54��Լ *�[��D��ω�~�U�˙�sε�} ���@�1�EDUY���c�� �y_�C (��W�����Q5��\K���?�|�f��u 9���V�v�[��q��]� ���%fX�ˀw��Z��]�φ^�q��g'a�7 �Y��? �ږ����v�����3���Ν�?�]�OR�������U`)��X��_]ԯ݂�A (���ۀ �TQ�fQ��  �1��H�˯ha��  �Jb|���Q!�_�!�hufPjG�_ ����8�����Tm����huLDE��� Pjp�i��xd���@��s����(��ޢ�ŀR��������o��*��ۀR��$�'�*��ۀw
Z}�Y��?�R�!�h�~dIky����h��h�6ԃ�Յ�R;���	�ރr��{��rA��Q�@���^��0� g�s�Z���l1���o�/�Ъ*��o~�7,�J��{�h�-WQ�՗���
@���+^� �j�{���� �%j�"��h��g��~��YZ�����Q
����2{��"���.��GhUD:{oW6  ����@�7���? ���wԋk����O�� �<��������E?�����Vc-�z�  ��b
@�l���? ����*� �_/W>  �qW?z��j�  ��\��j��?��ng  @�x�V��OE��  ��OL!�����jK   v��(�c��Z��� @ 
(��iU��<og  ���p��z��ڟ?�� ����E)��[U���C `��?\(NU��j����:��L!�٪����C �P U��Z����� t�����-��J3�� x��:G/�
��V��?_ <��׎^�eb����xL �AP����j��^��>  �_�4�R�*�����  �J�Q�r]����7��  ����\�VҪeO�n�1  �����P���*���^a  ���'8U��R[�*"��� 8���
�;��VUS����1  �?�n���ZL�V����N� ��.te��ܭ�}~��i� ��՞n�:dj��Vf�݈�,�V ���t3e���Q��Wt3����p�e��T��^��*���~�) ��O� ���l��V�]Q�ɶ p�e~�Wc�b�Wb�����D�ƿ}�1  �?hO��T�VҾ>�Jgyl��� ������-��,�|��Z)%�_���o(��:��š|z��`��b  ������e��� p��tq�`\>� p�A���9��~ ��O��˺pG�p�1  ǟN���1>rُ 8��QY{��ğI��3*��v������D� U�v~
�6��@ ��?�Zo�ퟏ;--`�Q! D��;�v=`\{��c  ���X���轻k������hu�Q! DR��n�����s��������.�Zɿ�g �0D��Cw�׼���'��UQeTT�U�GE��QQeTT�U�GE��QQeTT�U�GEmeTT�U�GE��QQeTT�U�GE��QQeTT�U�GE��QQ+�U�GE��QQeTT�U�GE��QQeTT�u �2I��I�$@� ���u�*��������?*�쏊*��������?*j*��������?*�쏊*��������?*�쏊*��������?*�쏊������?*�쏊*��������?*�쏊*��������?*�쏊*�����?*�쏊*��������?*�쏊*��������?*�쏊*��������쏊*��������?*�쏊*��������?*�쏊*��������?*j+��������?*�쏊*��������?*�쏊*��������?*�쏊������?*�쏊*��������?*�쏊*��������?*�쏊*�����?*�쏊*��������?*�쏊*��������?*�쏊*��������쏊*��������?*�쏊*��������?*�쏊*��������?*j1��������?*�쏊*��������?*�쏊*��������?*�쏚������?*��zۣ   a�[��A�	��TT���*�QQ�?*��GE�����U�����U����TT���*�QQ�?*��GE�����U����TT�����TT���*�QQ�?*��GE�����U����TT�����TT���*�QQ�?*��GE�����U�����U����TT���*�QQ�?*��GE�����U���~m+pf��6    IEND�B`�


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\assets\favicon.png =====
�PNG

   
IHDR   0   0  ��  �IDATXõ�klU��m)��A[Jy�
eiA
��@�`�	(� hLR�4"E�/B����(J�@0H A@I�
ET���V�B�(ji������3�3��K-�̗������{�=��Hv��H�n{�HJ� �ʨ�6x���`�JRڞ�7���'@j��%p�Fȁ1�ȍ �w�4���J�1d�\�mB(�20}�$%�H���=<K�je�p��j��#�vZؗx���sw7 �"I+��8I=�B! �������#LH �+8	���JP�$ � �y�Y��ص�5�yئ�J�x�4�I�fU��vޯ��Z�%~�����a�>�6ӳ��pI�IҚ�8�+Iů5�L�2�ղ��1��?Bq_@� `:
 �i�iZN��啔Xa����a�ưUa+w�3Ձ(z|\R@�Ω�H���h��A���c�8l�M��qnYG�KjfBl�$e���mIB$�(��SG�������M3H�(Y���\�;o��8�;�$L���)��:s{��o?�^����~����V�i׵���}h�4b�9�3���)j Xͺ���*��jգ��%e�z-^�p(6[*M�МD����B�%+th��-� O"D����f�
70�, )��h��.�(ǁB:,LK� ��#����d�+%�	�����Q=B����:� P�.��3�P�.�Ya {�+3f�q�3 �Ŏ��Z�H�` f͎���1�26Yz%@��(��o�9m��s���k� �Y;z�
<��|�(Y�BG��}:6 ���d+|���^5���?����Rr=!����Yc/-�5Hfڊa'jګ�r�'/����$�{���ǖS�}6�FDN*Z;���KS=�Z���b9v�,u7T^&�|�t�ϋf�.H�;w,�bq�MD��y`֩T3��\���3���!�Û#m�!ƭ6'&=��ĶKv�p'��涓g�g���9eq��C����;s�'�Ɗ�Û�#12AJ%iTbn��Ma���\q��ss�;��*��
m41�GIq��>�n�Y�/)aO җY��TX��*c�� �h~]G�����u������O��������q<�D��9f�y��W=��p	���.Eu�%������c$Wy�ʴ�ѼM� [YH�C���	����AJ������Pf�lv�,����a��:��є�A�c�̖!����F��������$j�@��!�m=u�m���N��2��2j�g�9Ӄ1��������G�r+)d�$��m����nQ-���숼��{�/ki��-�?=�j|����o�]�v� ޗ�\�m�q}J2Z���;E�zB�]����]<� �#�C�G��$!oQ�_�,I����9�+��u��/�I&N���    IEND�B`�


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\assets\icon.png =====
�PNG

   
IHDR         H�۱   {PLTE������������������������������������������������������������������������������������������������������������������������������  V�IDATx����@��I�%��͎��Õ@}+(�O����|��U�GE��QQeTT�U�GE��QQeTT�U�GE��QQeT�[eTT�U�GE��QQeTT�U�GE��QQeTT�U�GE��QQ��QQeTT�U�GE��QQeTT�U�GE��QQeTT�U�G�%U�GE��QQeTT�U�GE��QQeTT�U�GE��QQe�[ReTT�U�GE��QQeTT�U�GE��QQeTT�U�G�!U�GE��QQeTT�U�GE��QQeTT�U�GE�����!Ęr��*����>���oկ-˒s�3�m}�����1�e���K���%�������Xg�K��xH��3?�+p ����m���}<���3�+����wl1/{/�גg8�C����֙���[���
8 ��OG����(Ɗ"Q�ʟH�B��Mg7��O�w�gr���X�'89r>����'�Cc   ��W&���/	}� XW*
�?��O�B)`" 
��y߳�?�Z  ��Oڶ��
�i� @��/����!*�^a ���o�b���ҟ7�M��V��[*������@nﻰ������ @��+ۄB��߯�+�G*)��u��W �����B��ӝ3HCvF+�B*Em\|�s%�0 P��L�/���o��}�Ԩ��)k� @���]���0��D��U��bx1 P���O�B�
�D��*i��``lz� @���+�Ò{v$����F g- @;�o{%��I�!��� ��
 �q��5VS����Q`l4 p� H�r��Sm��v>��  �Z ���lT������s���� �<��gM��J���  �/ `��?x��@�j���~  p� ����?������ ��
  7o3쳦����� � �� @�澐
�U�/�, P ������<��yDl4 Pw ���'�
\�V � �gLt�鳺:��7 @� ̚��U�vu2~Ʃ� *+ ���8�#��+�9�  �� ����7W�,��cj�*
�>�ܐ~�:�� �Ԃ�����!�����`��,�:���[��w��Fa�
,�:���;����d��׃0V�Z�����*^��cUV�Tr��Y
Wo���
�*  �|�W'SD��ƪ��P�a��?�����(�
 ��u�1T�$�  `���N���d"  ��ڗ'��}7�k�
 ȋ����_���� �������jM�s	p ����R���ZD \ D��k�\�J��X�� {�?dUW�j�:�����L���;�V* P~,�(��i���4Z�/UUJ5;   ���;�^�T `'  0uV���
 �1���L��� _,U_��0 ���S)� �R�2�* ���_���
 ��*�
 �T�K' `G�4
� ���|�[* P@���* pw鮰� H- ��U ச|9� ��S�~+  �P�\�?  Aj���M�U `Y�P�?  L��V�  ��  Mj�Qp X��g^� R�ڟ ��* pK�]!� �L�����U �����dI �#�Qp �W.z �t���x8�
 ,�3IR���Q�U `Y�/8���C�[� 0TuW�� �Z��� ����HU}RuwS3 �P����HU�Rm7{  `�����TU'��h\ �M�I#U5K�oq W���,RU�T
�    (L�^!U�K����� @��?j��RM�/�* ���LH�1�   ��H�:�ԉ��;�� @�FFpH�Ѥ:�u��] ,��C��J��  j1u���RuL�6�?�� @���Ry�攮 ����:�Tv�vBW vK�Rul��"@��U �n�G��/���3�
 Ѕ�����K��~
��U �?��H�Y�:~pW n�?F��<R���   ��ϧZB*evptW �A#Ug�j:nptW �,�=!U�:
�L`��* ��# ��R�^�;�� ����RuN��v0���
 ���!Ug�J����* `�=Ruf�\O��U ��}RH�٥rۀ�ù
 L�]�#U��m�i М��燏��K�B}�돃�uh�Q'��Gȿ��y��ה�Ǳ{y	Ͽֿ`�k����q|O��ۧ�<��H��+ p�z��ޟ����_����k֗�w"t���8��*f�$ � ��r.�������a�z~%��ֈ� p����p����@�~��i�I ����n�}�,�L���?>� /gl��0�G:[S�k��]*�����o,��
 �_�; ��><�\��> �/Ÿ�  \؛��U���ߑ�zW�k�o�  ��=�� �6݃�[�� a4�
  �8�u/VI;W�NW
 n�8��   �?�k�J�8�Ly�kn�Zf�X  �>0��W+ ��~��յ��9B_   ˭� ����w���1��Q}/��TR�Kk��\n��o3�֨*��m]   ��� :�;R���L-���6.���k�]A�? j@f�B�n?��n��D��T�{��2��P] �' T ��K�� @�/H~�MT�I%mܰ�ި� �� * %��_= P�����^}�Ԩ���V� ��� � �.��H� �ݐ��Cj��m�dU- �[��* ��݄���%���}�U�n�a /U �I �_-�8������=I�M��L�FU ~-��I ʗ8.�2Efn���Fygk��^
���'v�  �T ���ވ��a^����5����g�Z> �À�J ��W  rݼ��ЎR�C`�_3% <�J �_�1Ҥ2���)s���6�a�V@V�,3�DJ ��G4 ��H��7��/1���F� � �9�&u����Zec��h{� ��F�T �2
[�R�O�!k��w����
 �h�J�
 8>�b�/�ſsZ���K�O����p�� L��(u��?9-D�*?e�����	 H* ���I�����[���	 ����" `��I���N���A�K��L��*� 2� L�/b���g]?R7����F�MՅ!� �  ��Rgl�}Ob�nWf(#@���"� � �e�/Rj9�ɑ���d�"��e��] �e�R���祊�
�F���Z���* ��_��r������PdR�T��M* ��_�T��M��j���K�H��� �ɿ0�����$I�

/U�~� 10�%��EIݥ�5/UB��U `b�/Ij9�!GQRw��R@�⥊&��R ����&u*�ߑLW���K�C�Q��* ��_�Tʳ��  �V�T��^* ��_�Tra�� (��RE�K� �1�YR��� ��F�ԏB}�� @b�/G��˭W��r?p�T���U ���_������ "��� @� �#�)��\�? ��I�T~	��u� �_��(�� �#��I���ۻ
 ؏�C9��� �n�G��|�~�� @��(��m ��xb%s��� @R��w�  ����FHB��U `����_�P՝��?�t �+�\�竾�[�{A�	�ƮFicW���W-C�N�?� ����4w��� @f:�r���? �N7�M���c.m�* �D.u�E� (#`�"9 `�6�O�0>�
[��H ��� ��< :�?�:Y��
��gqW���i���� `՚F���ļZZ�U ��i����c�  kK�EK��O�
 0�.DN��ZQ���ze��]zY�UT�>�l��ǎ��7 �FR�Q� �B��ڮ���Ë��lE
 l'հ�u�\�u�}����� ��T���K�a��  l��������t����5���`zm����7Dv�\ũ�J�y �aI�Ӄʢ~���|�;U5I�J�a�r�V9Y_�2��`+NU��
+�e��D�q_�_����T �"�!Qo�5��ł��;�w���>�N�6�n�����Z��q�T �" XI�*��� H���vH ��M@�ͯ,e����_� ���w�6@�Q�A����y��忧�SU���"�wX�E����q �J����o�;+��� ]�� ��T�ؐ�F�wQ<�_Q��2} H�,��WZ�����+A��`�����������y�]�@�4r��'�
 #u�$5�-� h \w��]� ��fAh�h�?��5Tɳ� @�T掦������@MA�/�N�� �I�>�����^�
��6����?} J����� ���C��/;�� ػZf'��5�	@�a��#*��  �R{��;I}_�W�� �NC5s�J @�T��������P��y{U�p}e @�T����.R���Xi�mv��N&�g６�� ZFH����p������94e������$�$�UQ���-?����s������r�j 5��T��߲dx�E����*pU�SԮ[u޾aHЭ���|� ��go�4�|���e�PM�g�$��Q�����@�|'���{�F�����w�
�e�� E^kxx�V�8E*��*P�2 ��z�	x�Ƿ_!Tc����*Pϧq?j� �`�j�����U��ANYu��� �C5��0}��@�ˀbG�]�������}��@]?(�D�`��%��~��@]?j~�	�����?��@�:�ux�	�0�j����]�ɟ�8�<Q�e{�F���@]|@Pi^�Ճ=T��K
�5�jG=�;w��8��U�Feݨ���7����%��
Ԩ�5�&�Vmp�j��z\jTׁ�t�W����1Bjr�Q_��M _��P�!>�r�1d/����_��`�>��2W�3@oF�0>�yC5�W�*PcH^��x��	��xCu��5�
T� ��E-����J�7TÃ����D�����˂�5T��qU��%<���&��9X������E�`��.���jb��\�ચQKx��D�k�	�i�zk������nT� +jbxk�����Â�jG=��[Q��?vL �������U3@q��1�6 L �3T�6���T��N�|��`��I�?�Pu�;NFTI?��u.jU] :\U3�AyEe����s�\�j� �Uf�W��AS�z���A���u/�^gc��`�U-�&]Q���7+��1T��W������cx������ZC՟��CM�V���:ZpU{��zC�����
����W��:�*��zC��,>�O�<�jU6>�J V�>�����Um�j'Xl��VN�) z���� �U���,8�P{]AP ��״�qU��Y�6ԡ�U��M-�pU˨E߃�P�Da�7@�����㪶Q�����.d߹�Ϻ �Um���zPuX������U��jHL.�"��pp�L�k���U��jQ�A�W��������@\�7&T�7\ ���: �U��A`��j=:�[ �&���W�;ñ3���R �(3�uu�A-� ����U�ÿ=�b��f�3��_� �u����P)4�y�' \���0vB�д�c��"0�U�Rh��,�뮷�U�^�Jh�*%�&��E� .�
�c��#�� Z x���X��*Pg
��Rh`�_�W�z��o��  ��?I{��@�� ��@ ��Z�mp�������T	� �O�<�U��O���cC%��qcѿ���W���	p��4Sh�����n q��4�De
��Cm p�4T��Q �U���W�:I`@�����׌^p��܌f� 1�F��/�5 �
ԝ4������:8�?j��@�xQ)�E~r�
 ������[P)t!0�������:*%@�9�
�?� �*P�	;j��T /��L��@}�r�����7�Q{m p��l~
���{`-r���5 �
�$� �G�ǪK �ǳA�E� �*P�����+�?�]n�:��EK�e+���������A]�C- q.��)�鏊s���7o���T�H�|���3�JT	��T����$U�����#Q%T	H�ՐZ�*~����(W�J�>H~��]�JPu���؁�'%�	7�;�?8T� T���S���A� J��+v�%��������M	~�o�����7�_ؿ�8���<ѣW�Z�R��kI |�|L8T������~�oO"�F���8�Ґ ,��q��>D~¸Ц:�Q9N�v ��)���ގ=��~�Q�
Z��|�/�j�3@�)� s�����?
�;����ɉ�*�y@ul�9mw0;
�����	���rn�h��<���GsQ��]��
�
YY���a	�M�� ,���\�	�(����H 0�<�Su-�����t���_�c�������鄙*�9(��X d݇ h��*�� ��%n�(8������ p=��Q��ŉ��M!UibD������ؾ �w��� *S!Ui��Zn���Z�4���>R�`�1Z��j�z6f�ú�b	�[o�NXR�6 � ��v���VM�㶺I�k��ٸ��x-�i[ 0'SUibJV������	@��?l���
T�i�r�(ۦ �JSDUڀД7�������R^�Z�t���4\���v K �j��wo�m�@�K�� l	�ȷܯ�_�w�Ik>�	7�?��V�F��Yw��X����@��/���B�M�˟��k��
J ���Ms�C ���� T�9M�Ө�/�p
U� u6�
,�� �jY���[��P�}) �ځ���&F��}U�
 ��~��|����R @����Q�88�|Q�
 �J�?����os@�Kc�
J �:�Q�� z�) �T������C��
TRh��g{�>����?4R (��oZ�Cm�a)��� �66
 �������HuKǥ�T�u�
 ����a��� �
� ��2`n`Ua	�Q�ݎ���@+R�s-7���� � u����]��o� hD���q�7�:.� TP0�ҿ� ��W @��4��:.�h ����8�0� @������P�R@�v� �LŢN�{�� ��� H����*R@�ZXU0�>K���w� r���-�}'�-��:��p�Է/r���{�� ���-ھ�KföU���P(,��:w ���R��T�
��F��K����>�/,j���� ����_�R��U�Q��,��Q}	0X���w j��ƌm$ ��{���<yT�E�IQ������X� �R-+��}T��6���/ǨD����O}�R�� V��V�>��'`Ρ�ܶB��:�`g��a����f��<^�O ���BQ���0��f��/�_KT����?<S���w J�K� J��"t�X����'n�E��ą�T��! �z���k}Ts��~���Oj��b�t�R}���� �����Q5�hT��J���6�ϸLL�8����[����٭�
g��)Q�`�R�g�V������!*g�����f���on�o��N��[�L�3+�ϣ���s5THQ��y��V�*��g�L��	�P�
�k����@Q�� �I3%����sX��QU^�3�G�m@�:wy!(��
R��s�5zM ��0��4�R	՟�:ty���RA����<6�
^6�t� ���j�ÀK�j&ե~�D���ӿ�p��Jڀ���a@?�"�:DMu� ��#s�g ��ۀ��p��H���$��:���4�
Z�����
�J���A`<�pR��XW	�8���PA+�P�w���|Ӗ�*h�S�?7��3 @����:�����H�>�)@U�q1��
2�{���D��=��<�T��ӏ��:c���|\�xT?
 P�A��	xR� �����>T?�6I���ћ�/R�I� }TMq�gh ~C��N��Q�$Q�Z����Ju�C >�n�o�T��b4�(�����''U�d���-���,�Gō�Y�&�'���*���8 U��q�P}��;� ��0�ի� &U� |T�Q���N�XT�y���?�- )���I��ZQ�T�.�{ �ZrO��a8')�z�j��
G����;�$Q]�/�����yU/(���	<�� u��Jp�]R��Gն��o8��x�Q�0��	�Z YJ5�)U%��k[���c#Уz`P3��)  U� |T��(���@	G �%�� ��& o ��������� ��AD�`����v�)  Ux�GՖ�n����{ �� ��jq�GUl ���Zq�Q<��  ��&���&(����Q�� �Z�0�C�`������� f(՝9 U�8  ��{���GU��C�n��� ���= U�� :I e�m ����Q�& ERX��Q��`/	 vC�Gej ��Y����j̽%�ɿ �O8^
�
�s+D���%հ"_�J �7om
��g��U����PW/w�yqR��-ZU�7 |pm��P}�R�_��@_�TG1�*�cv� �<��Q�9�4�ǀ2��i5��ږ& ��)� �j��*�c@@�ٸhU{� �� �+z��!�<��YH���� � �Y�`Q�A @�:��q9�T'�4|T-�
@� ��G���6� ��֬X�T�8�Qf�/͡62<{T�&@-���^� ��FITm� t� J>�2T����$���T�IT��  Է?	H��Pw�=��Iu�7ET����	���l�u]��m
fr#YO�2���_x_O�5ծ���%�K � �*{�Tۧy�I"��C�RU�q 4��JTn�R�30
R%��9@�R�@:  �`��� �W�˥�ؤ.	^�7W��UG�� @=�Y*�'�/~��V]����s��P��8 #/��U{��|R�I ����}��P5 =�6�TD�/6��$�C�����s��P�1" ��  j�
R�I ��7�������)� ��^�R!y��إ��b�z�˰�+�PEa ����
���Ku݅�R��5�cI꤇� h p K�� ��U*�e�*���*�
� h��R� 
ImRW��l[�z��  �v�A� n����&��^��R���;�U*? ��[
�R
�pE��3_X\KU��e @= �T��/N�ƫ�T*��F/������ �T�h� �~�lR�h�� ��*�V �� @�bC �ʟ��:��߶"��͸D ��
 ��j�߹mw��T~�]���vD�Tb ���rvI�v�TG`�\K��q��xCKŭ#ە��N=�T	~7~��T��0 �� @�"퀳A�?��R�;�_��o�3���nh�Ď�� ՞�H����~�m��Ա ��A�rC�� ՞4I�����^mKUs�	 8�^d��N�"�\�7I�G'�:y���| �� �����l��$uD�g��i�ʓN �}�=�T3ЬR#�a�Tv;�
(��S1� 7(R�!���l�M�����.�G���x�!좰� ���R�{ݬ�K�῏�*  ��  K7_��ЉTv�_ԥ����� �� ��m)7� �
�K*� �[�K��� +:(R�i� %�*R]�2��m��<@: �>�q��C� ���T~�-�YY��_��� �ŕ
 �p���\R?3�C�޶T����x�	o��(R�e �ʿ}���ԥz�������q�쟵m[�;��;�\�ž5�E ��,~ةT|7�H%�6 ]�?�D����+�S�| H��&�c��ޤs^� ��Kެ� اR�F r~R���-� `� D*�����&u�
@}]�m�>I�����,� ��*.wS�In���*��}� c|Z�]��s6�܉ �=6	�ꮒ��R��.R�u�� ������b�j:�0i~)��E����%u��G�q��
8�0|�2Z О��� �Þ*����ڭd� �����*}b�U�I~;����&�: :[- B�T���&�o-�N+;����4���X�p#��M�
��?��� tW����l
l��
�G��n�g6� Ǥ�E|�N٠�+�l+��7(�����)jx?	@��]R�C�F�EQ}@ S��vT�M�|#�I��6Z(�4�6��/��5e�@���j�M�� l��3 |'�J��% ���ON�}@ڹ�5��o��Uj���FTu�?�ֹ|S ��r�l�z<��R��� ��p ��:���5m��_j��n��rרzO@J0��vfK�p�� �pY�[A�o)"�b�C�򭀩;
:�\��;8 �	˨�
�;? ��m~j�5� 3r�I6�-U�s �{���c 2|�WI6O*��f���0I���ն�2�� �3�~�
(����'���I�9 '��{S-�oP�i��L/�� �8?|/ �yKi��?9�e��V�u9���ݥ6)��0�oZ� ��w��
�՘�L�@eZ���u���� ).Q �p <���"��5���  
��L������-��5�v@V�= ��O���~� Е{W1�| ��	| �e���   ,7| �ъe�e!��>����<�T��6 {���dY�ښco>g � P˪� �����3�
�Zw�.v�ʟ	�oR���|ek�Y3y
 � GZ�2 ��Z� P���` �@� СR ]��^ ��*�� ��U~��K��7�Bg[f�V�R �l���k�@� P ��JkW 
 F� �* ���d�7���'%��������7�Z (  Jj� P ( Գ,  ���@� PR �*�K�2 �W>�@��T �]UV�j* �wUI- `���o.  ~ l��5?�� P�j"PM*  
 s��k*��>�j,x}Vk,�i,x+���.I�!)��_
�?l������RwV\�y�{$ &��N+0  �z�� 0It^��	���<ʇJW@p/g����I�Z� `�L'> ��9]BP����%> ���+ Ce�Z�k� �z=�p�tŀ��?:W �� ��> Bj�U�0n5> �R�!$����;,� ��%�Z���Wd `��z,Vӧ���hS ��@�W� G�o��1f(`'��@�W���|T�(ˍߝP��	�U ����  �T��	�_U[k����*�5Z�6�>qۤL�T"U�< "�:�b�Z퉆�o�����P�`=��e���`�����B� | ��e��"�h&�9���ش�� �h��R��%uq�?��t��2  z��>�T|/P�:l�S-����n� H���V�Ƭ���j7�p���@2�+ ��zV��V��긁[N3@k���� �突-U��K�+���r����� �� oT*�	�R��M�M��;8 $�� �����J�o4��_+b��WW�Ɩ���DjX�M=�hb��=~���IVU�k��&urm~u����i�$@ ��U*;\Q���@B�;�tW��  ?�W�>�f7��  	�2�w�W�R���ն0���=_X����]%+�-5`K�Ԅ�E-� � �����-h�|����m{9��ϕ�h|#��*=¢���j�/*���J�;����7讒/�Z �J�{�t\m6�X ��J�� ���R�E�F�nM����M�+k��tW}HK��/�W��U��`+���� =�d��"��N��]��M�
���V��P�]E.�TzYmV�t�ڸ�7Ҝ@��b��c;��"��\7� �=�Ԏ=T.v'P���E<���O Y��>��]ƟW�&�鮒D�̖J�7�Tk7�I�`���@�ۨ&{=�-�|X�Fh�2�閟�ԥ�'��~=��ʙ:kt�j���ᾱ�"M��� �3@gK庀6��/�T�ۆ?L��s�l�`����X p������F �R}��qwM<��p��9kv�"RC���'([��Х:{�� n�2H5�T*��6���d �5/j��} | ���S��=Ƨ��y�| �;��R�)��]���&u�΀}
�]K���
����E*9جR
ĺ�I}3|L�����p�@��JN� `���"t�+���cvtm�wU�!� ���6����Nh[ه���֤ #�
���>1�ʿ�\���:���U� > 4<�S*?�R�F`�Ԯ�$~�=g+c�ތD*����ިT���Z��_��	 �4`GK� �  �|��*���r�-U� @C�Z*- ؼR
��:��I��Y/3hoM �.�-� " ����n�����׸I�K���,� ���$�T|�f�����V �8����! z*U��"�'�\f�� �@����� �o��R��d��9D @C�[�TR ��o*5��h҇z��� hp K ׻ L��R��" ���_�� 
��, ��!�H�(��U�\ X��6��R��	�{��_`R�vC8��U+�# �;
 �R
��*�_�)w���e� ,��j `��>��"�\d��D\f�� ��� �K\ > >��"5$��-ׇ�Wf @C��%8���R]) �ԑ�����C]I ���`��
� �~��F�󰭽�2l?񶍥�K�� 8��I��d�9�����PI �����d h�t�K5pk�I]�x~�B�ޑO��[=イ�2��C��`�R�9@gBt0޶�#��ni"� p�  �#�ju����m�5 "[�U �`�Ku��f����d��
{ �� ��c] 4��N;�-���v����Dׄ�ʲ ����Jv��0\Vj��M9�u��_�Ӛ<_�x=�@��:8W8��X:��lt�(�g���vb�� ��t�7 � �<*izD� �b	H���{c�I @Mm &��b�o���]@ ՟�^�w� ��58�z���P�p>,P���龪�% :AMZ�
��o1c��w�J���;ꫪ�,��
�m�Q�p�#D�D3@�T���퍛k�oz2�&]=*��Q�Y�~_^�7vd m���
`ksQ����Շ�bc�jAN�j�c ��QQ]��K���'V(�G�W�~؍4�C�~/2>@Ԫ�w*��O��x��m�� F}����j7#6(��?�gUu
��
 l ��P}|Q!�bkU���
?<�U�EX�� 6 b��&�U��5 �
T�T���n�|czM8E�yT5��$j�5 H*���`U݋��� �ap���=�ߔ&��{ XUs��W>j�'@1CT�H��+]�,H�.]_��� ��jжAD��,Q�v��O �z�= ��z�v���8 �U��; ����} ��{ XUm^� ����(QG�%�?%MJ�� ��� �@���?Nw  �G >�R�=�����|Ԭ�_$��y՟��>�(UJu����zX ����ͣ���J��@J�� ���8 @����;�Y��- �j
�"髪���
0F zT�0�MF >�R]M�!P��(��߾����`Q}ԽRԾ� ���R�񒴯�1� TW�q�����$jM���j�gl����� 	U5��?cT�]��� �� T��>)�W� 	�&��E����E}�� �}IT���* @��Q}�{T� �cB�
v�Tk���jۯ�|T���G僮BQ?�!~����T7����z��E>����G���͹����5_�TG�
 P�t` �s�{T�0TWJ	��W*գ_�U�� ��[3��x����po�_�鿔:Q�.��U�� ��m���_��G�����ߙƤ
V �w��|ܯ����1Pԇ���@+��ǀ^�{PNo� ��_�տ�~��G��cґJ�ǀ^��K����PS"�E������jI��T�Q`~U�k�ϖ�J� ouiz� �JuI���.�����}��,꯶��T��q�N
`��ܻ�e��{6�c+m�z��K�}�H5#�R����P{6����3%����Yԩ��^{ +�1a��z.�
�T?��2�$a�ɢ�	_���Z���|��
`�c��W����<�� ���M�R]��ڬ̵ϻ�G����\�T6�,�� �M�R�f�%՝��6yT��� 5� ��.!�Fˀ�JuK�B�.�����K�����[� ���䊐4����%�A���1
�� �Ħ[	= ���^�m����w�m��Q���P}�� ��I`�T�;�҅ԥ�o��� L
�w 	= �j������e��ʩm�ծ��s����O��^���cs��P�
�%}�s7A ����z�G��ጚ��@�A�9�E/��6���*W�vU���Q�\K�ɴ���УJ� �>�Qu��޲m�Q�� � C: �ş� @��f�}�����[�Q�%�E�Ju @���0��S��̷̨��j�P�% *��+����L|��.)���eoYϰW�@=�t����� ש�\x�xCY�U@ (P� ��>5�O���%@�������P�@����I3E�	���y��̨���d{p�*/ �� ��h��K �Jر
����˫� �ިY>���� �?#�T-vgK�Pc��e@^�� ��; �����@���̎ԑ��Y
~^�����&=���?&�TM�T2@��nw���^�@�F��oA����k��K ��[x?Եt���I��@�Jv ��kğ� |���۽�rx�P��[/��*/ ��)hXSc��*�s��Q�TV_ԵT#���� Wԇ��1����oL�@	�c�N�#n͈�?�������9�FXq�?/fT�X�yU��\�q�- �T`�Q���,p*&�T=�n��Wꚗn�� �I��Q��=�
 p*(�T=s��Z��9�5<�����O��Ӈ;j�eQ� �Fc�Q���}���=�/@k��>�j�W���-��^��u[��=�u*׃/ �/�T{�-�u|
�ϼ=�}��x� �ut~	�o ��?�3A@�����X��V�3�5���!ĘRٖںM�k� �y��5�K �*�����
����0��[��q���O~	�s �����������e��<P�;@�Q���P�ԍ^R�ܚ���h�;@�?��/�c@�SG��(����ՀV"�UT ��z�#@x(pj����y����[-����|,���_�ǀ��nhEﭥ����%
���4�Qܾ�c@�S�\��Tl͵���x >&=*�3������8�2��Lf}g?5Z��?*1��=;Ь �0�&��pC2�
��o٫�TW�l���g"(���*��5I��Imt��
���΅���d�g�*��J�8�z���z�+���
@��
Ӊ�9�:�}�����'�ꔞDO� F�G�~�&5�<�a�o��o�e�^�o[���'<) ��a��tT�m7�ȫE/ �Q�E���Fs�����~%/����/��`�Y���;`6�8����r�ӵʒ��j^ _M�IK�3��������P9g ��Pu
�8�7�_�?
"W	�-x��v�n:�B�����^�\%T(���z�x
��PAx��J���~M�nG�/$�����8�J�\ �Ʊ \(����R�\%�T������ 2����r����y�u�5���E����<�UB��H�e��r�ob�\%�Ͼ6^����A7���?��ZV�J�w6 6� 
���6r�P��)��+\�������

@���\�2�C=�	���

@����ف<s��O���*�B� U����k��M��\%��_��:l��2G� �N����u�U �8��k�*�v� \�� ����ѿ-g�UB=��T {�����(W	վ�w㿲W �� 鿛�*��DB��b�\�[�l'W	�(����:���~(W	u�; $T � ����w�*��� ܂� ���?|j-�\%�7?�Y� ��ޚ\%T��k�U # K��9����C��B���p���q���j��v�mE����5OY�*��g�j,�
��p����r�P�@�Fp6���\%Tl�k������?n�`����W�*�X}�Pg�N#����o���r�P�:C���������Z�<�\��cI�P�� �a�4��_�r�oT���� |�&��;�*Ϩ8 �y��� ���2��o�*Ǩ	!�W� �G����`擫ܢbG8�P�`������~V��+�
�x���g�D�1�Mr�OT<���t��_3Q�Wr�GT\ <��3��g��G�\�5�� U�h�Q��U�Pw���I _��LD�q��*o�	g�D�^������G���|�b$�� �),0Ku?�������٣�U��,U�U��C�LE]�����,ն�H���Q��D��� �.,���Q�\� �P��ڵ��!j����&Wy@��WW*��݊j���B��*�n����V�oV��Tq����G=p�E]ޭ �
��R��
 W����'.jz��#Z��[��ׁ\5$*����ڋV��/Fen�6l�\52*�k\TM O�	�j���\5.*��5qQ���x�J��qK��o �j T��mԦ	����T{�7�\5*��6�	�ȥ��o �j T�Yɨ݈�z��qK5Tx�\5jB�u���0�K�o�'�U���٨I��O��eb�j��$�jT����ګ&�g���R5�#�U#����P�>C#�Kլ�j T[]j��|~W&z�5"W
�jkKC��@���k��*��t����s�?�����U5�Z��� �UL	�ʾU�����y�w�����9aUٷj��sV{���UHʍU��V/X��[]ïw �(DpdU=�U���ש�� �+D�ꑭ���`�����BT� Kêz\��F�����G�34�P�� �bu��5��[ 6�P�	@ X�:a�kXuwƉM�LQ����V� ��`uC�&`IQH�xUE��@�kXM 67���V��0�bu�� �	hU���s{����Y>�S��m2��@�Q�*��>���j�8�Q�����N�׉*��� x���&�g6 [o��u��Z&@��zkXu�o!d0�D	 =�V{��ױ�؅`�$���1Rq�}�8��I�*�@�� �)E5] JCC ض��?�$%�3�-��iE����Y���mֲڱ�[�u��'���S��M��`;���{}1iE���`�j�ם�ձ��ojQ��� � 0g5��/��տ<Xp/P:��f�ʥ! �Y�r?���k�A�à��� ֬�����fux�`�1�۳^T��n�)�iЬg����Ž���QuZ���5
�W��w�
/t�jE5�_�� �b���V��w ˏ��u�- �Vq����6�TDӇ1���tɥ� з:��y����p�1��jT��z@�*N��O�z j����9�:6����E��G�z{��M{�� =��(�ب��9 �x L��Q7@�j�5'S��H#�%��;Υ! 4��A��^+/Y�R�?���(G �o�I�Ū�ŧ������%<`_�Sc�(�U�?�7�9�r��V���~2vX��pi� 	~m��U���Tn���m�
`՟��Y2r�>V������ 4��[�� ���6
*�̝Y��D�(�.X\�dtK@]��ŗo�
�á�8���$��# jZmGɨ����PP����	*��
P����d���\��RW�ڻ�E@�@����?��Z���*u���{�W~E�v& �[}
���|eE� (�W��,�,9-PVi����G��M�&_���+PR���?�?�`Mսk��I��"9-P��¿}EX� U�z�8p���cC �;r!Kk��*��@��^��a�4K% i�����jQu��m j�	�MJ��_bk�!F� �ՋX�q�I�Q p�s58�/��|  �F5z7��E{U����o�~�^b�J ��؁ �D

P�����O��� ����v�]Yg)3
$ V/Ƈ�, գ�Ե��x/ l�P~��W��Q=	�`�  6��˻�w���S% `�$��� �-�����Z%�NO� �-��LY��!� ��G���"��^O� �OtEcV��=  �O��?���' ���њ���)&��?T�mY� ^v}�@�@ cV����[�W��-�X�q��J �% X�v���@��3�	�Z��% {G6a�=�_"�! ��o�U�Íh`��"�Y�m0$ ����o�����o� 0O �ڎ��� ����Z�@!�S X�ڍb�Ўjr_�E��?4
O� �G �
��-��v_�?Z5X�Ӂ P��$@ �V�g�L��F� :P��A/���r�,ѓ�
[�M��E7��X�Qg�� F̊�ߢ��_�[ 7�?��PT',�͂��?���n� @��z�j � F:��Ee��ͨ[ �Z%o��#�-+^�J��-�ۇj4�jT������A���:�A�1�]$@��^vT�FE?����* I�����Q	��(P� pp���~�s�_O ��b��Q	�O��`
p&T���>T��k��;O�u�� ^0�����N�Q��O��`
����������v�����Ul��P� �������z�� F�U���d�� hU�`B��l�)�	@RV��8*C���=�섨6ᡊL�:���ß[ ���u��
+�]
 �t��`WHIc�k�e�u�@#'����"9]����?� ���o����%VT�U��y��'�]Q,��e..&�Ί�@b �
����y6�"��f�
&�q����[ ����A��yIƽ-E��4�������[ �Nφ�; �3���@�a~�m�_���i��YP� p<=*ߗ���oѝU�B����$�- v��z ��d�8T��t�>��O/��%	P� ��[m<�xFxW�J�<c��ŏ�(_��.��]��`F�� ��h�B�#��/��c� ⿄:|o!Mw�b�@���͇���}��+<�^M9��fJ!4��2��:��t�BJ�� ���k
`�3Q� p�A��Gb֕Rs���^62� ��lUT|)p��*)/R�$c�_[F�ȁ���U�ǂwl��������[ 4���W�E	S\�K���ܱ��n\��%j�y��4�o&�`~��q��U�S�����`��g��Z���v��-�tN�a�[z�zK�#5���*���&D���X#)�i�gj�<f� \?���u OT�D�z9�řˏm��ͯ2 ���b�4b0��c\�p\h�6��˭��@��3ğ/�D �JO��8��)�#5�6D֌�΁��ה�Ά�.��lW�U��}�F�3Y�l��HE�q���d6�]o��v��yvw?F���b�
@�^��[)��2�����gC)��DuT b/<��K3��>�9�4IU �� M��`�{f�˼Ͽy��e9'V_qLR��Uۯ�����֞*V�"��'XE熪�����*��ʂhI�
 ��%���o����L |��k@�U�ZM�X8��* �ǽlhU�V�'B0��
 �k�xZէU���K˩ ��w3��?�k�vB��
 ���y�U�Y�Q�6�* P?�3Ѫ����K �r�ßV�bU��E�G� @���U�X���� �L�}�UX]�:�w�* �_��U�[���:K �׀`hU�Vנ�~ ������(�U�Z��%��* �0�C �jԪ�����R ��hU�V]ԁ �=�^eC�ڳ��^\ש }(�V�f�G��ߩ��@��jg)l� @�GժC��D�Z���T��Z�(���
�:�D� ��BPC��oU_��;���! zZuu�.����T��! O���V�?�I �d0��V�C��?���C��U״�b��O� `��-���U}��%�* (�=�V]����, մ�*O�.d5����? ਮ��G P���7[R ;�EU� ��� ��'U ��2P j��Q��g��2 P����?�I �� �cU���? �Q]gQ�G P����&R �� �jgQGR �Ӻ��_ �e�����wk���� UX-�?R /��` @VK�ϖT���e �S���T����  �[-�6K"U p�*@G  8�j��/a"U p�*@ ηZ��lI ��  εZ�t�
 ��J� �D����D� ��m�� �gu���
 �G  8�jro���!U p>�y�U �|�߸� ��ޤ�z�U �.��[R=E�jC�UV���R�?��*������?��'U P�
 �4)՟T@U�lI����%U P!FC�G(�J� u}�+�>+��b�I ԋ ��D��z��`I T��8XR}��?zC�U�PW�&�nH5� ��'�j="Ա� ��I����H��� �PǍ3;L�z��_�� �}HQ�R�R�u���JE���M�
�!���ծ� �P�e��ۘHUS����G��.B����2�T��V�?�'V �Vo�= ����g�� \�� �0��Ͻ?ʆ���   `P��N��T���� �Z ڧ�������;�	���.����M6��{�-�t_��|� t���>d����IurA�{�� ����<4�����(4 r�����:Q~FΒ�VP��\gK��s��'X � �^
l�!'��ʈe��{.ù�o��L��q��}�7�ԟ���/����MU��v�) 8i��3�Ib=�TUF���l� ��(ݸvܩZ7z�%ѳ/ P [�2M�A�hS�ꗼ���� (���l�ŋc�*�l׶�u? ���/A�+O�V������ (���Nr^�զ�͍�w_��� @���!��W�?��%W0DY  �������s�����e޾� @�����#paxiRU[��N�%�!� �Ç�^
\^#8izU���Xz.W��S ��'%��r5).&x'b�U��:��o���, ��/i��&�)�Ō�s����~���OD�:�C0�Ğn萌�, ��4u�r
�p��
��J����zQ ��rZGl���, ��-h�@-��p�� ���i���� �O��_�r7��Y  ���@��W�<X�@U��5�'>�הx�*���������:|}��g����&.�S���&�ju� ���*����_Y)Ec�wb-S=�*��m"��o��A��\� �?�1�Ƙ�Wםy �UT��QE�UT��QE�UT��QE�UT��QE��?�����*�?�����*�?�����*�?������ TQ�GU TQ�G����  �AX��oqf����U����TT���*�QQ�?*��GE������GE�����U����TT���*�QQ�?*��GE�����U��&��U����TT���*�QQ�?*��GE�����U�����U����TT���*�QQ�?*��GE������GE�����U����TT���*�QQ�?*��GE�����F�X���    IEND�B`�


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\assets\splash-icon.png =====
�PNG

   
IHDR         H�۱   �PLTE   �������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������N�s   =tRNS � 0@`o��������P��_���PϠ� �p����������p�������`�o�pPpO0`��{V�  CFIDATx��	  �0�_Z��aO0�T�5�����U����TT���*�QQ�?*��GE�����U����T�T����TT���*�QQ�?*��GE�����U����TT���*�QQ[���*�QQ�?*��GE�����U����TT���*�QQ�?*��GEm�?*��GE�����U����TT���*�QQ�?*��GE�����������U����TT���*�QQ�?*��GE�����U����T�V����TT���*�QQ�?*��GE�����U����TT���*�QQ����*�QQ�?*��GE�����U����TT���*�QQ�?*��GEm�?*��GE�����U����TT���*�QQ�?*��GE�����������U����TT���*�QQ�?*��GE�����U����T�V����TT���*�QQ�?*��GE�����U����TT���*�QQ[���*�QQ�?*��GE�����U����TT���*�QQ�?*��GEm�?*��GE�����U����TT���*�QQ�?*��GE�����5F�����U����TT���*�QQ�?*��GE�����U�����U����TT���*�QQ�?*��GE�����U����س�H�(��@������=d�Ai��3�u7���� 9 � I�$@�+ϿQQ�������?*�쏊*��������?*�쏊*��������?*�-�?*�쏊*��������?*�쏊*��������?*�쏊z�쏊*��������?*�쏊*��������?*�쏊*�������������8��r.��O�/�j�s)%��}w�O�@]�e�y�����ZJ��Я>�[Q Եc���^���< �����yj�4�-.�pA��ڏi���r�� d���!����-�p&�@]��k;�OW�8�� ��c*S;����8�� �vc��B=�� �: �]�S�`���y ;Qe�O�c���=�z �����J�A%��Re�윇��8���d�"��c��9����9����d���[����Z�d߸�������h����ߪ���1���&;�m�o	
`Ax���v��9k��n����l߆�1�B@x����7V�y�*s�Z_NV��( ��-�?q�����$a��q�?��$�4
 ��_�������b@�( ϟ���O�iQ�Ɲ'P�r
0V�?�b�{_S$�ƍ_5� F��7{_��o�#Eg���r�r����o�?����dR5��:d
 ����Ũ��Lz��M;n+����~���P����Nc�	* ���J���W������ ��Oz���Г�jΡ��P+ ���O��^���y�T���@�P ����۩gL�w��3�  <[��~�oU�� V* `���Գ�ڻ0 �� �m��u��o�C� �U ����5kJ�x3  X� ����:Z[��=�?  �, �v��̬3U}��  �[ ���o�7U���  �- �v��̬=U}.��( `� n�G�!�ކ' �� ���o��Iն����
 0��޼�T�� �
 0E������g� V& @��k�ȩ��0|   �H  5>������<� �" `��C��S�
 �
 ��q�:��J O/ �����# W �s ��~�#U�S �V �*JV��T�!�R ��
 �f���vh �� `�G��ǒU0 ��	 ��=RR�L �% �3��'?H�o��� �� �����,R}d�	 <� �Ͼz|�T;_2�� �)�P^�9!�7��� H_�|���?RՁ_  ���u��?H��T�[B��,�j��G����F��+�z�o��T�,L�j�B��*u�TT��T�VSBe��H�q��"�F� �1���*p)�JH x����G�oU_$�
  ��R���[|�T�B��_�(վHx   T�,��� ���%�
  j�,Q��J��H H��Ϗs[E����   ����h�g|�:�՟���
�T��N���_�KX��۴  B�=s�'e?��˧����j,!Ԧ�DU���'���m�</��Ç�����?��b�gg�Iw]�eHe   Tڗ��WJ�*�����/'�W�n㌦�
�����V�$N��o	Y%m7y��7����PB`}�A  �P��_�ӰJ�f�匪�l�)�>D��  ���'���[%��R�s&����?
  *3��Ķ�lV���Z�.�.�( @�W~Ϫq;_.&�s&^���+ju!!T*�ӿhV�+|��|�t���
B� ����ƲJ6�e4�]�b���  Be��Ǫi�2����)�na  ��~z�*�ܗ�(��`��ǁ  B5�?�_�*�iiW����x٢V�e��[⭦��>���fc�1Z)E��JJ)c����aߞ|z`R�+�F� K����U��S��tȜ�jJ��]�o'� �.[ �(�A� ����U��i�ﬦ��J���Ɓ��E�[�   Bm���Jf���j�T�q�S9V�V��'    �����j�r�N�I$U�Χx[�A�:�    ���RV�����3$�*��(ˀa��<   ���ۿ�V�~L��Z*Um�a�2��0r   ��Z�*��~�N-��v#�#�z��J�    ����Vǯ�O��������j��]�    ����KXU���꧸�����$WK@'A    �����:b���RH��g/� ު0   ��!���|f(�T�1 ��Ve    
���VM!��M�x.o�0�V4    ��i��ۿ��f�dۛPrV    |��&k�v���RN�w��,@تe    �/fU�o��3�j�2୊    ���J�rPUGϑjo� x��   ���)�����&F�ˀ�FԪ��B   `���U;����gK�?����20   �g�_ʪ)1S%;� -e�!��  �Y~��79��,�����0r%d�!@P   0C�wrV/���S5��(@����    b�_Ȫ	b�?U}��Y��O�  `�
��E��U����! WVY �4 W���:���1j�,�   �@��UUDh���dU(!��   ������i����0P���^   �z�$cU���jy%c��~    ��@"V����t�v<�T=   ����KXx��JS�5
,�����  ����y���V���J߲��Z�j�*�   L> �Z�*�KFa5ը��\	X�~�^   ���V
��0UFԱ�3V��    P�UW
X��]��/վ*5V��G   � t�[��?����J�o�ㄣ    x՜��V
7��Sz�F8���O�   ���@3[��~?�D��V)��*    , 8�UUD?��&�(ԬV���   �
 ��V5���&�T�/��۪y5T   0f���m�����S�_|7����  ����_�z��� �O!_��q��   ����٪bξ�>�T��	���V�;k   P� p����K0���O����>    �Vk��} x8�l�j�1    ��n^�
����  �V�|��k�rc    �� pF�����.���m�u^���    ����y-W�Ag)S���!8�����vi9]�����2=�gF#	3D�Ժ|?� >/~�L�u��4�   ,�Q
L�n�y�_ �h7�qL�0X
 �%z˔���� �@��n�-1  ��$J�S��) �]S��3�⤷   ��aÔ��i�߮�5�D�u�wz �� Qj��
��U�F@K�:TX i��ai��Oú<N�>[���,?Ƚ�����2B�?}���N������/�	����秖V�H��\�8^��D ��0)4����T���̐ ��_> T �ӈ�OH.�Q���VE�� P`�7���A��[qo�p�@�������J[���Ѥ�^�� ��k,.�x/��c�*c={9 I*��h  ��
K���V=|� ��̱@ �q�������e�٠;�T,�H  46Wt<0�_ �	���:���(  t&@�r�_ �	p��<Y� �� +� � �IbQ�  lM
 W��_ �p�%E@  h��� � �3)��   @�f�/ �Hd0 ��"N�-9��dg4RY�0� �U�I�� � {&�e@TV�Z̃w~� |�c`� �U7�S:o�W 09peQ Y����	��G @0�w�
��H��� ��oV	 6���@V5� ��y� ̧,��K�� �U{����J �'CJ�>� �U��c��4 �8��
豵  D`Ւ���� y��V �X
 1Xu�߫w��u����1���@�V�-@��]* H�3h�� p�B�L _����K�F`�u� �U��Ӡ� 6R�o�p�V`- nՎ��C�F�_ ��韯 ��*��{
�, ̤�\�c
  lU~ 
�) �N�6 �X ![�U��z�  L��
L�`�ڳg�䤉 `,u�y� ��*��~H� k�C�� �@ Ԫ={�c��K% c���2�S  P�:��ƻL ����/k P�� ����	 �RK�� 
� @�V�' ��  �b�$�rc- iUv��TT XIjN��@ Ϫ����`� �I=$� Z���\ ��� �(�)� �U!  � ��Th\�S  ,��n��� �J���{b
  gUr��� ��T��EN�ЬJN 6�( �,u��W,~� �*7��) ֖:���V B�j�M f|Z@ X]*3�D@. dU������  �.�/2n
  cU��q�v��� V�
E@�M2  ��ԛ 7�� �{g��6���9(JI#��vd��ٻ�UO.,;������g����AQ��ȿY�U�py��?	��� ���j�3;���`%u��� 	�5@m�ڡ�ӻ;  #�=Z�JQ� ���Dξb+�f�w ���7��kq�gI��>�Kk��[o���O�>���>�ð��71�� ��JQ!V  0eo�
�����|�4�����:�v���N U@c��>.�H5��:�����:@�P�ʯ�� ��������n6�X4��M��ѭ��(: �@֜�̵�?�
�_Ckw �y�4鏵  �x�)g��Oq3���ۛ��}����m ���Фb���4bc�Ɗ`O� Zl � i-�d����گq��V@����"5 ��t��ۂu�?�Ň�1ߦ:�'O��&���5>$���A<5:@�Č,� @T� ����q��F[�C �� � �h��  �j0��L�>� �4m �$�� �T��?��o}��U��RC��~�����'3����#C�A�Ʀ� �d��@�T��?}٬��ϥ����&3;� � R<7
 �8�B R
���M�����Ꮒ�!T� �8� �L�- �a����r��O�����!�
 � �Q��� �h� b=�Ow?	٧�:�K]����qW�h��2`�0  �.�X ����1�d�w�~���
JR�8�� ���q! ��?�xz�։�����y � ��+�GZ�@
���Z��Q�?=$�.�l�T  r��� �\�o�a�0�h��j��
D*0�S?  ���F@���L?����|�Ձx8s��4
 �d  ��?=�`A^~�W]~���T��s�>�� c���`��?�����9T� J��m������T���]��Z���W ��r � � h,ng�������>L� 	�L`�$  3�����揢�x�+V�s0w m�� C� p �(��ŭ��������KE�z���   �hcqk��ND�˥��.���k8`�_� �`�2 ��W����`�D�*��;�6��s @3 �2���Cwv�����@�2� ����� �� :���-hk�r�? ��� ��S��`��5 ȴ���ЌJ�._����4`k� |P̾u 4�,��J���O��~/�qDj:��4'K�2�#9: Z@ĒAm+hh�4��?$�$  5ae@� @c ���)�'��y�}U 
  H^'�7h� h �oX5�����yV���R����@ˀ=�� h I�-�������_�|��J  5I�{ 9 ���&�P&��R���Z>( R�F�:��� T@�oR��?��WE	pg� ��
�m M@mGf �T`������  R�m?*���� �00J-���7��iU`��Qǭ������ d=JT��?L��ǥ�#�qe� �-�'� 
`�{�L�3����祾'@F@� �C[@; �y�c������_.� �l� g*��d�f �Jy�f �T`����p5��9 _p ��N�
e 6�_��2��^�W�X0�I @# 8輅2 ��	��/��\
:^*��E { 8 rA��k,N�?e��_�T�DPNR�@H� ��?0K$Q �. �~��Z>��e ��=�S&@ Ћ �M�[�Y�!e�r���ō��3�BH�"��
 �
n���H�O � ,�*�KMT_�As	@ P�1��RKv!KH�RH�I�� �@�O�v� �T`+ુ��
�,�c
  T�)(%�ʥB	���X-nrL���"�r 4�3T6;�=�o��R����R'(
�e@ �C� �S ��;� `媋�"&��_N��	 �
md���* @*Q�ɶ'\�9 �@�֞�	�5�Y|U�5����
�z29 �����ow�Y� �T 	8^*�XN�� 8Cg6}�@���I�gӗa2T	:;  ����ӗ��  R�$ ��
�*��V (��@�Tr�,-@������6�M� �uǠ@ؿ�� �j�! +(T �@
��~}�T`0|U�8��Ke� �Y@K 8 �%d�D����W -\5� �T�Dx�T�P7 �o�E�KϪ�V �@%c�� ���7��0��@O��_��! -�~��P9 f���C�������Jj�&��� �П�#R�usi �� �Ԃ����� ����k���� ^*�Re�f-X9 ��m qo�� �T �Ԃ�=��}w T h�?�I5  �P��
'���P7 ��=S실2�g��� ��J����W ; ���lL�+��  R��gLjA���� 0 P�a�@����m^*��1\Tjb�ZWv T
�T0s��C���ՂU,����pP}�P5 "��:�E��k �}a��G����P5 �f.PJ���k�֮:P.�z�r
�� �
 =o�2�@Ƽ� � R���� 0  h+�<�J2��: � P+���'�[�% �]@�o��Iax�T�(��6@A �� � 3Rq��#b�g�X �e9  5��Av T
 �z�Z��k@*{���l,�I8 ���|�M��%gUV��  ��Th@�� � �1{�ଊ|�JE�7GR*���� � �@
���@ٿ�3 X*��T {v�  ��Tx��x�d0 R�v �� � �/H����� �
��J��@M�w  ;����O�R�� RK����k� � ��+��	��<� ���J���� � �5� �Ԛ6��g/�$$4�@�k����?eS1 4�I�Բc�@� ��̀D�d�W	 �[��;�P �M�H^�o �ޜY�@���  �	��{$\� �g���;��P- ^y�'@*pެq h,��%��$8   ��������R��x��I M
 v  :��p?S  /- R��?N` @d�qc�3B/V�A��w�98 � v�� 'D�! ���k7!��  =R�ڂR�& `�,Rٵ�q, 8 �#|Pa�V�g��
�B��� Ƹ���+�b��b� ��/W��~ �r@iu{� p |ɷ�C�� #���ԅ�� x\D��>�> �&W����@�o
 @��j�  2+�x��� �B�� T��}  �+< �;E { ��>�`Ģw͹i  �8 �� p \*Pyh o  ,�0  �G; �� ���> �K�  �#�+*�N� XL `� ������U{ �� �����+���:�_u�\;   ��� p 8   ���� p�8   @�÷SU_��
����� ��p ��p ���M ���ۀs×���T ��}8 ������ � @=� ���=}8 N���}S �8b�r x[������ط��/�=3��w=5~�} 8 ^~,_# f���� ���[͵ x��_���?���৿  b�����?#�(��   �bM������.�{�^��i4)(��e �Y@��ZuB�[���x DD�� d������`� �$�Z�C�j�]�29�v�> L��J��
�H8   l�BN��?�� 5�U>* x�H$   �~W
x�g�`�K�����zĬ��� p�nfM�6���fg�T*&��v ��*���|^�Q��@�|9���R�� ��4�`rqUV�1] 4����#QUj �� �7i]�n�r] xV��wY`*	   �;����_�o� 'MoL:-~�/: *��w&�̒\? x��R��`
 ��H����� ��@��� C  5�mx���W� � I� �� �� �r�Z����Ach^*w��,� � x608f
`��j ��MH�� '��� �N~
2	��q���T>��T�2�����8�"�����
DT��
4Y�o��� |.pX��' @�������D{ 8 $Xc,��9��Z �l2RG���X5  ��S���Od�KjhGFjA�YӪ� 80/�����p ��R�M!��=  b+h��Z�� �Z��Ծ���*v p t̧�T*�|� ����H�jG@�) �� �6 o�Q0�R%�- ���/P?Ӫ� H�{l@�9�p
 
J����e�)�= ��=�v�T`��� ���z�F��3 { @�{���g(�%�[FjA
p��  �x*�2�O��H�� s�m�ɽ{ 8 �}@�\eJjAp�: $ �"R����9��  �(U� H-��cj  ��E���Y�� `�������� ��g��U� p P/�
�#d�8RU R* DHjA.���1l�� H�
�g �� �T  ��(��� p @= $~L�Ԃ � 
 n/,�9S������K���-+�
� C� ��#�R����M { 8 :��؝�
� ��+ 8�=�}�&@� p �
���u �,��Q � ��:@��L�  5�|'� ���]A  J�������: �����DNjAp-@+�;Nj��]���� |7��R�`h C�!@Pj/�t+�` �@���^���� ��-/( �  ���%o�e�$�5 �\ �RU�L�~ 8 �>0�;/�U=� R����R��,' sW�LP~gs�Y��&m`-����DP� � 8@ٟ�ӅJ-�CK ��[Lj��P-� 8 ڙ���ZP�� �����R_5�j��� ���\=*��9��� �]�奞)�E�	 8 ��(��e|m k2P�%��QQ�}i��_��ʕҏ�6 F[��6i  m��>�R�9� ����@jm�Z�  z��,f��(cn 3� H����D{ 8 ��MA��da�SA8m�'U���T� 6T	`�  �(���LK-�P�j�����.V �Qn  ��u�L�L�V #�`�O�y8SU�m3 p H �����G�5�v��h"5`YӤ�  �����?�:V�`5���Fj�K̿j  !w�� �T��~\�
��lZ R�@���  ^8Upt�<x���^�� �$o�TG���
{#��&� *�V)@V*� ME��  � |�ۿy�T~��7V��@O R}�\�`9@�������T��?>T�0Ė�}������W�
 "�׺ ��?$��E���% 8 :��,�3�G�L /�n6 �hl�B�����/�T� O� ����t؛J|[hh8 �fe(H���9���^��X7��h ���T�Jv�O��Y5 `����d� {�LO�5 @�JAg�)�Ư� XO�������� � ~o�ޜ�H	�l��F`��R3uLP�K���󄓔M��m� Pj�#P��v�! Aɶ9 8 �@(�T F@ H]O��G�ؽ�W�%�� a�A�U����1 �ὖS�Y;s�M� ��ojpH�	�o- ����K=pǥg�Mh  ��,��~�� �
,�ӿ� p/�AI� p ,\��O!R�� 2�.
�t������[C5,�[Z����%�dm�e�<�Pj�A�b� "k�2���
@����2`�H*Ty !5�� ��@Ru��� �&� �\ ?�+���4~0����p?ӣ�h �`�$  �x��
 �Ԃ����v���w��� �[��Nc9Tj���?�� ��������ܱ
�w�X�_UsӍ�  �X� 4�)�&�:�Ə�p���a�x�: �'��q�@gm$C \*�yȯtߟ��R����J�,  Q
	� �T(�0 1_5���Gc�jq�|F]>�) 8 d؝`�\4F\*���(���a4r���5 �2��
 � �� J�Iʥ���~�C��2 <KGن� H:i���c��y��ys��s��f�i���.9@ ���a 8 4HdP������1ooV^j�6��󱋖  @_��� 8k4� ����R��iجc���p�����ӟw 4 ���M���qO0�R� c���&��-��BXŮ뷟?���?� | �ǾS� p ��c$C��:�w_F~�ӟw 4 xU��
 � C�c����P��� ��96 �m煆 5�9�l`ǴYjt�;2 H��y��Ѓe@��c����We�u���H ����� �n|���+>�6�V8�΅,.u� t�B�1�k�x����[��"ژ�U�  Z�`��������f�hk"�e�= �2��G}��r��~����X�t#0e�� v (��_>�nVo�t�),
~�ܧ� d`���: �@�K��RΧ&��z�Q ��15� 4 P�/�������X Ռ�ݗ?�����;�J��� ��
 �7phn��!ޯ��v�/9���y��m��bh��̹�pi  �Ϗ}��o���K�c'z�	�
]���;�V�18 ���u�t �h`ʦ�[���J��V �'��z\��A;[�� ��ڍ�������`���=�s�18 ,��&�9@�����ꀃ�Bꁭ jf�vU_�� eM ���.(�)�����!@|�8 .*5d��@�W�U x�]��qp \Zꀵ^w ���^�I� �e���# @ � ��U{50Y2�$�p�a�qk 8 �w�D� �c��pI��L � �P���!��I���rR��@��� ���D@'ct \J�
� t���YhG��@4T�Q�|ܔ�ʸP��_{L;��уx��9Y�֒�	�?T�[ B0,��jAO p�� ��P�o 	���jMO p�� ��P�omI� �OX��	 n �~�jh��|'�*��*   �4T��F �N�� ��B �@ �k���{# /[+ x[���w�.* ��*@; �V�F�Ɵ.. ��*@;�[����w�	�pQ�ǡ�󽿯�IK��ꋱO �Z�I�ߪ vIVAP��ՋK<u!��" �:T��t��3����% 6 @�C�{;�n �7X ��x1 ��#� @`* xX�: p�� ��P��>��llIs��|n� ��ު P�h?~7�� �^lY���6 @�Zc7�R�� �U�Q �Y {I�U���������"���*� i��1�
�WA �)D� ���I�
 <
�?Ԭ
 K�5���`�� �J�na�>?� �C �lY?dmBUA H%TC�: E# c3��Z�� �N�n��ԉ-� �\�?��v��B���QO| �yt �ۤު PR�+�
-� @gN�U� 
 i���9D. \�q���EbX `�o�F �?��xlb  �X�r��G  ��%m�F� �  ꀷ4� @g��'�%x�" ��$m�  t�fY-� 
 �ի� 	`iN!� �hN�ZCcA�  B�I�)� @g�)Xe� �Dު ��|��|� c�����AP�	  �j�թ}�^� �4�Y��I @h<��|�  |���NxV;N� ЃP=�H��� �Q�@'<��A@� ��ֹ�]�9OS]]�҇tq������8$�� �f\	�KЋ�������t
���$��s�]]����ak� �$�o�:s%�4��՗v��M (	8ω���C:���6�( @3�7_�+���Ž���� P�ǀ�	��V�ǏuXF5Xe� .4p- �N�������[`�vWiYR��-  k��?�ZDCu�:�
h���L  �$�˳�� m! ���P�ju� �w�X`Z
���� ��*j/��B / � �#p�N�P�  7�Q��W����y`��+Q�-t	��n��n�i��9j�nD��#8�P�I �[�b�1��$F7r�k�6� �I�����L�m ��7F���� �^!�9jp�� �!��#G��ǃ   ���N�5TĨ JbTaܨ��Z� �>�F��91�Տ.�����Q�O��[kH�߾�ѣ>��, ��y��A�@  {���Q�#��W ���ѣ6�   �}���QCI�B<� �8>�U��'   �X�?jGW?� ��8�Ǐ*\�  0������,�b���;*��n��B 	�@e���"��K �!�	��4�G� ���5EԎz���@����Q��/C ��灨IU9ꡱ�! �PN���< �  �����SD
��Տ ���Z�"j=� �@'�DՆz(�F[��7�I�J�
C ��/D
%�Q�-�^�RDe/ �
�
��D�i�vԇk6+ ۘ��?AT���B �=�*�&jpԇ��) ���Q���&[� &xP������i{�����Q+��G�! ��
(RE
%�R�
�_�!U��~ @ ����,�v�K!��j|��s����/   ��zG�,j���
�Q�_zo�Em>e@ �� ��JS�\}���w*]Ԇ��
  �7@����~J��V��o�tQ��;@ o}H?$�.��ӷ�|���	���[�U`�)�JW�]c��q���Q��� ���NU�P���jCL�2*�#�?�`��*�H�3�PkjU��t6eT���_��������F
��j��VmSQ��6mT���?�`��v� 	�(�
��VUk(JG���B �4`Q(�ebɭ���x�:j|�!  �D��^���2[�YI�֟G�d�! ��IUyz�b��V�*���������  ��HU^�%L�_P�V円�?q�f��� �_�Gn�	��
9���*?�sZ5� 4�g�!  ��Ee
`j1o�6+̀��0� ���� �7@Ҩ��� U��jU�
`:;� \��? pSE�g�29u����9~�?�� ���TQՅ�q�ZNժ�
Côj��U���   n '&���0e�l�V���,��l ���l�Ԏ`¨��FUd*I�VfEE��Մ �@ @N5~�����*�Y�D�Ruv��f��� P*3 ��FUG�c��n/�[Z�RgEe�vL���z��� P*7@3u�[�<�+�V��Y>��Ӫ�����@�� �ɣZ��]��<���J)!��OT+��Ji��E�d���v��N�� J����>*w@B���x���I�@�'�_��tq��Q�9@8�DaVӂR�cP3EU��f�wj�P���������-jЭ��ԯ�l��8.`V!�Yp�3�̼��?�s��%�fu
P�-��y���54��Լ *�[��D��ω�~�U�˙�sε�} ���@�1�EDUY���c�� �y_�C (��W�����Q5��\K���?�|�f��u 9���V�v�[��q��]� ���%fX�ˀw��Z��]�φ^�q��g'a�7 �Y��? �ږ����v�����3���Ν�?�]�OR�������U`)��X��_]ԯ݂�A (���ۀ �TQ�fQ��  �1��H�˯ha��  �Jb|���Q!�_�!�hufPjG�_ ����8�����Tm����huLDE��� Pjp�i��xd���@��s����(��ޢ�ŀR��������o��*��ۀR��$�'�*��ۀw
Z}�Y��?�R�!�h�~dIky����h��h�6ԃ�Յ�R;���	�ރr��{��rA��Q�@���^��0� g�s�Z���l1���o�/�Ъ*��o~�7,�J��{�h�-WQ�՗���
@���+^� �j�{���� �%j�"��h��g��~��YZ�����Q
����2{��"���.��GhUD:{oW6  ����@�7���? ���wԋk����O�� �<��������E?�����Vc-�z�  ��b
@�l���? ����*� �_/W>  �qW?z��j�  ��\��j��?��ng  @�x�V��OE��  ��OL!�����jK   v��(�c��Z��� @ 
(��iU��<og  ���p��z��ڟ?�� ����E)��[U���C `��?\(NU��j����:��L!�٪����C �P U��Z����� t�����-��J3�� x��:G/�
��V��?_ <��׎^�eb����xL �AP����j��^��>  �_�4�R�*�����  �J�Q�r]����7��  ����\�VҪeO�n�1  �����P���*���^a  ���'8U��R[�*"��� 8���
�;��VUS����1  �?�n���ZL�V����N� ��.te��ܭ�}~��i� ��՞n�:dj��Vf�݈�,�V ���t3e���Q��Wt3����p�e��T��^��*���~�) ��O� ���l��V�]Q�ɶ p�e~�Wc�b�Wb�����D�ƿ}�1  �?hO��T�VҾ>�Jgyl��� ������-��,�|��Z)%�_���o(��:��š|z��`��b  ������e��� p��tq�`\>� p�A���9��~ ��O��˺pG�p�1  ǟN���1>rُ 8��QY{��ğI��3*��v������D� U�v~
�6��@ ��?�Zo�ퟏ;--`�Q! D��;�v=`\{��c  ���X���轻k������hu�Q! DR��n�����s��������.�Zɿ�g �0D��Cw�׼���'��UQeTT�U�GE��QQeTT�U�GE��QQeTT�U�GEmeTT�U�GE��QQeTT�U�GE��QQeTT�U�GE��QQ+�U�GE��QQeTT�U�GE��QQeTT�u �2I��I�$@� ���u�*��������?*�쏊*��������?*j*��������?*�쏊*��������?*�쏊*��������?*�쏊������?*�쏊*��������?*�쏊*��������?*�쏊*�����?*�쏊*��������?*�쏊*��������?*�쏊*��������쏊*��������?*�쏊*��������?*�쏊*��������?*j+��������?*�쏊*��������?*�쏊*��������?*�쏊������?*�쏊*��������?*�쏊*��������?*�쏊*�����?*�쏊*��������?*�쏊*��������?*�쏊*��������쏊*��������?*�쏊*��������?*�쏊*��������?*j1��������?*�쏊*��������?*�쏊*��������?*�쏚������?*��zۣ   a�[��A�	��TT���*�QQ�?*��GE�����U�����U����TT���*�QQ�?*��GE�����U����TT�����TT���*�QQ�?*��GE�����U����TT�����TT���*�QQ�?*��GE�����U�����U����TT���*�QQ�?*��GE�����U���~m+pf��6    IEND�B`�


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\api\auth.js =====
// src/api/auth.js
import { supabase } from './supabaseClient';

export async function signUp(email, password) {
  const { data, error } = await supabase.auth.signUp({ email, password });
  return { data, error };
}

export async function signIn(email, password) {
  try {
    console.log('📩 Signing in with:', email, password);

    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    console.log('📬 signIn result data:', data);
    console.log('📬 signIn result error:', error);

    return { data, error };
  } catch (err) {
    console.log('❌ signIn exception:', err);
    return { data: null, error: err };
  }
}

export async function signOut() {
  const { error } = await supabase.auth.signOut();
  return { error };
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\api\comments.js =====
// src/api/comments.js
import { supabase } from './supabaseClient';

export const fetchCommentsForUser = async (toUserId) => {
  const { data, error } = await supabase
    .from('comments')
    .select('*, from_user_id(*)')
    .eq('to_user_id', toUserId)
    .order('created_at', { ascending: false });

  if (error) throw error;
  return data;
};

export const postComment = async (fromUserId, toUserId, content) => {
  const { data, error } = await supabase.from('comments').insert([
    {
      from_user_id: fromUserId,
      to_user_id: toUserId,
      content,
    },
  ]);

  if (error) throw error;
  return data;
};


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\api\supabaseClient.js =====
// src/api/supabaseClient.js

// import { createClient } from '@supabase/supabase-js';
// import Constants from 'expo-constants';

// const { SUPABASE_URL, SUPABASE_ANON_KEY } = Constants.expoConfig.extra;

// console.log('✅ SUPABASE_URL:', SUPABASE_URL);

// export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

import { createClient } from '@supabase/supabase-js';
import Constants from 'expo-constants';


const supabaseUrl = "???";
const supabaseAnonKey = "???";


export const supabase = createClient(supabaseUrl, supabaseAnonKey);


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\forms\CheckBoxGroup.js =====
import React from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import { commonStyles } from '../../styles/common';

export default function CheckBoxGroup({
  label,
  options = [],
  selected = [],
  onChange,
  singleSelect = false,
}) {
  const toggleOption = (item) => {
    if (singleSelect) {
      onChange([item]);
    } else {
      onChange(
        selected.includes(item)
          ? selected.filter((val) => val !== item)
          : [...selected, item],
      );
    }
  };

  return (
    <View style={commonStyles.formGroup}>
      {label && <Text style={commonStyles.label}>{label}</Text>}
      <View style={commonStyles.row}>
        {options.map((item) => (
          <TouchableOpacity
            key={item}
            style={[
              commonStyles.checkBox,
              selected.includes(item) && commonStyles.checkBoxSelected,
            ]}
            onPress={() => toggleOption(item)}
            activeOpacity={0.7}
          >
            <Text
              style={[
                commonStyles.checkBoxText,
                selected.includes(item) && commonStyles.checkBoxTextSelected,
              ]}
            >
              {item}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\forms\CommentList.js =====
import React, { useEffect, useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, FlatList } from 'react-native';
import { supabase } from '../../api/supabaseClient';
import { useAuthStore } from '../../store/useAuthStore';
import { format } from 'date-fns';
import { ja } from 'date-fns/locale';
import { commonStyles } from '../../styles/common';
import CommentItem from '../ui/CommentItem';
import Button from '../ui/Button';

export default function CommentList({ to_user_id }) {
  const user = useAuthStore((state) => state.user);
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [limit, setLimit] = useState(10);

  useEffect(() => {
    fetchComments();
  }, [limit]);

  const fetchComments = async () => {
    const { data } = await supabase
      .from('comments')
      .select('*, from_user_id!inner(nickname, avatar_url)')
      .eq('to_user_id', to_user_id)
      .order('created_at', { ascending: false })
      .limit(limit);
    if (data) setComments(data);
  };

  const handleSubmit = async () => {
    if (!newComment.trim()) return;

    const { data: inserted, error } = await supabase
      .from('comments')
      .insert({
        from_user_id: user.id,
        to_user_id,
        content: newComment,
      })
      .select()
      .single();

    if (!error && inserted) {
      await supabase.from('notifications').insert({
        user_id: to_user_id,
        type: 'comment',
        reference_id: inserted.id,
      });
      setNewComment('');
      fetchComments();
    }
  };

  return (
    <View style={commonStyles.card}>
      <Text style={commonStyles.sectionTitle}>💬 コメント</Text>
      {comments.length === 0 && (
        <Text style={commonStyles.textMuted}>まだコメントがありません</Text>
      )}
      <FlatList
        data={comments}
        keyExtractor={(item) => item.id.toString()}
        renderItem={({ item }) => (
          <CommentItem
            avatar={item.from_user_id.avatar_url}
            nickname={item.from_user_id.nickname}
            content={item.content}
            createdAt={item.created_at}
          />
        )}
      />
      {comments.length >= limit && (
        <Button title="さらに表示" onPress={() => setLimit((prev) => prev + 10)} />
      )}
      <View style={commonStyles.row}>
        <TextInput
          style={[commonStyles.input, { flex: 1 }]}
          placeholder="コメントを入力..."
          value={newComment}
          onChangeText={setNewComment}
        />
        <Button title="投稿" onPress={handleSubmit} />
      </View>
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\forms\DropdownSelector.js =====
import React from 'react';
import { View, Text } from 'react-native';
import { Picker } from '@react-native-picker/picker';
import { commonStyles } from '../../styles/common';

export default function DropdownSelector({
  label,
  options = [],
  selected,
  onSelect,
}) {
  return (
    <View style={commonStyles.formGroup}>
      {label && <Text style={commonStyles.label}>{label}</Text>}
      <View style={commonStyles.dropdownWrapper}>
        <Picker
          selectedValue={selected}
          onValueChange={onSelect}
          style={commonStyles.picker}
        >
          <Picker.Item label="選択してください" value="" />
          {options.map((option) => (
            <Picker.Item key={option} label={option} value={option} />
          ))}
        </Picker>
      </View>
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\forms\UserFilterBar.js =====
import React from 'react';
import { View, Text, TextInput } from 'react-native';
import DropdownSelector from './DropdownSelector';
import Button from '../ui/Button';
import { commonStyles } from '../../styles/common';

const REGIONS = ['すべて', '東京', '大阪', '名古屋', '福岡'];
const PARTS = ['ボーカル', 'ギター', 'ベース', 'ドラム', 'キーボード'];

export default function UserFilterBar({
  sortBy,
  setSortBy,
  region,
  setRegion,
  minAge,
  maxAge,
  setMinAge,
  setMaxAge,
  partFilter,
  setPartFilter,
}) {
  return (
    <View style={commonStyles.card}>
      <View style={commonStyles.row}>
        <Text style={commonStyles.label}>並び替え:</Text>
        <Button
          title="名前順"
          onPress={() => setSortBy('name')}
          style={sortBy === 'name' && commonStyles.buttonSelected}
        />
        <Button
          title="いいね順"
          onPress={() => setSortBy('likes')}
          style={sortBy === 'likes' && commonStyles.buttonSelected}
        />
      </View>
      <DropdownSelector
        label="地域"
        options={REGIONS}
        selected={region}
        onSelect={setRegion}
      />
      <View style={commonStyles.row}>
        <Text style={commonStyles.label}>年齢:</Text>
        <TextInput
          style={[commonStyles.input, { flex: 1 }]}
          keyboardType="number-pad"
          value={minAge?.toString() || ''}
          onChangeText={(v) => setMinAge(Number(v))}
          placeholder="最小"
        />
        <TextInput
          style={[commonStyles.input, { flex: 1 }]}
          keyboardType="number-pad"
          value={maxAge?.toString() || ''}
          onChangeText={(v) => setMaxAge(Number(v))}
          placeholder="最大"
        />
      </View>
      <DropdownSelector
        label="パート"
        options={PARTS}
        selected={partFilter}
        onSelect={setPartFilter}
      />
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\ui\BackFAB.js =====
import React from 'react';
import { TouchableOpacity, Text } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { commonStyles } from '../../styles/common';

export default function BackFAB({ onPress }) {
  const navigation = useNavigation();

  const handlePress = () => {
    if (onPress) {
      onPress();
    } else if (navigation.canGoBack()) {
      navigation.goBack();
    }
  };

  return (
    <TouchableOpacity style={commonStyles.fab} onPress={handlePress} activeOpacity={0.8}>
      <Text style={commonStyles.fabText}>← 戻る</Text>
    </TouchableOpacity>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\ui\Button.js =====
import React from 'react';
import { TouchableOpacity, Text } from 'react-native';
import { commonStyles } from '../../styles/common';

export default function Button({ title, onPress, style }) {
  return (
    <TouchableOpacity style={[commonStyles.button, style]} onPress={onPress} activeOpacity={0.8}>
      <Text style={commonStyles.buttonText}>{title}</Text>
    </TouchableOpacity>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\ui\CommentItem.js =====
import React from 'react';
import { View, Text, Image } from 'react-native';
import { commonStyles } from '../../styles/common';

export default function CommentItem({ avatar, nickname, content, createdAt }) {
  return (
    <View style={commonStyles.commentItem}>
      <Image
        source={{ uri: avatar }}
        style={commonStyles.commentAvatar}
      />
      <View style={{ flex: 1 }}>
        <Text style={commonStyles.commentNickname}>{nickname}</Text>
        <Text style={commonStyles.commentContent}>{content}</Text>
        <Text style={commonStyles.commentDate}>
          {new Date(createdAt).toLocaleString('ja-JP')}
        </Text>
      </View>
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\ui\LikeButton.js =====
import React, { useEffect, useState } from 'react';
import { Text, TouchableOpacity, Alert } from 'react-native';
import { useAuthStore } from '../../store/useAuthStore';
import { supabase } from '../../api/supabaseClient';
import { commonStyles } from '../../styles/common';

export default function LikeButton({ to_user_id }) {
  const user = useAuthStore((state) => state.user);
  const [hasLiked, setHasLiked] = useState(false);
  const [count, setCount] = useState(0);

  useEffect(() => {
    checkLiked();
    fetchCount();
  }, []);

  const checkLiked = async () => {
    const { data } = await supabase
      .from('likes')
      .select()
      .eq('from_user_id', user.id)
      .eq('to_user_id', to_user_id);
    if (data.length > 0) setHasLiked(true);
  };

  const fetchCount = async () => {
    const { count } = await supabase
      .from('likes')
      .select('*', { count: 'exact', head: true })
      .eq('to_user_id', to_user_id);
    setCount(count || 0);
  };

  const handleLike = async () => {
    if (user.id === to_user_id) {
      Alert.alert('😅', '自分には「いいね」できません');
      return;
    }
    if (hasLiked) {
      Alert.alert('👍', '既に「いいね」しました');
      return;
    }

    const { error } = await supabase.from('likes').insert({
      from_user_id: user.id,
      to_user_id,
    });

    if (!error) {
      await supabase.from('notifications').insert({
        user_id: to_user_id,
        type: 'like',
        reference_id: user.id,
      });
      setHasLiked(true);
      setCount((prev) => prev + 1);
    }
  };

  return (
    <TouchableOpacity
      onPress={handleLike}
      style={[
        commonStyles.likeButton,
        hasLiked && commonStyles.likeButtonActive,
      ]}
      activeOpacity={0.8}
    >
      <Text style={commonStyles.likeButtonText}>
        ❤️ いいね数: {count}
      </Text>
    </TouchableOpacity>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\ui\ProfileImage.js =====
import React from 'react';
import { Image, View, Text, TouchableOpacity } from 'react-native';
import { commonStyles } from '../../styles/common';

export default function ProfileImage({ uri, size = 80, onPress }) {
  const content = uri ? (
    <Image
      source={{ uri }}
      style={[commonStyles.profileImage, { width: size, height: size, borderRadius: size / 2 }]}
    />
  ) : (
    <View
      style={[
        commonStyles.profileImage,
        { width: size, height: size, borderRadius: size / 2, backgroundColor: '#eee' },
      ]}
    >
      <Text style={commonStyles.profileImagePlaceholder}>画像</Text>
    </View>
  );

  if (onPress) {
    return (
      <TouchableOpacity onPress={onPress} activeOpacity={0.7}>
        {content}
      </TouchableOpacity>
    );
  }
  return content;
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\ui\ProfileItem.js =====
import React from 'react';
import { View, Text } from 'react-native';
import { commonStyles } from '../../styles/common';

export default function ProfileItem({ label, value, multiline = false }) {
  return (
    <View style={commonStyles.profileItem}>
      <Text style={commonStyles.label}>{label}</Text>
      <View style={commonStyles.profileValueWrapper}>
        <Text style={[commonStyles.profileValue, multiline && { flexWrap: 'wrap' }]}>{value}</Text>
      </View>
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\ui\ReadOnlyTagGroup.js =====
import React from 'react';
import { View, Text } from 'react-native';
import { commonStyles } from '../../styles/common';

export default function ReadOnlyTagGroup({ title, items = [] }) {
  return (
    <View style={commonStyles.readOnlyTagGroup}>
      <Text style={commonStyles.label}>{title}</Text>
      <View style={commonStyles.row}>
        {items.map((item) => (
          <View key={item} style={commonStyles.tag}>
            <Text style={commonStyles.tagText}>{item}</Text>
          </View>
        ))}
      </View>
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\components\ui\SectionTitle.js =====
import React from 'react';
import { Text } from 'react-native';
import { commonStyles } from '../../styles/common';

export default function SectionTitle({ title }) {
  return <Text style={commonStyles.sectionTitle}>{title}</Text>;
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\constants\days.js =====
// src/constants/days.js

export const DAYS = ['月', '火', '水', '木', '金', '土', '日'];


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\constants\directions.js =====
// src/constants/directions.js
export const DIRECTIONS = [
  'オリジナル',
  'コピー',
  'プロ志向',
  'アマチュア',
  'ライブ中心',
  'レコーディング目的',
  'YouTube活動',
];


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\constants\genders.js =====
// src/constants/genders.js

export const GENDERS = ['男性', '女性', '不問'];


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\constants\genres.js =====
// src/constants/genres.js
export const GENRES = [
  'J-POP',
  'ロック',
  'ポップス',
  'ジャズ',
  'メタル',
  'ヒップホップ',
  'アニメソング',
  'ボカロ',
  'R&B',
  'EDM',
  'クラシック',
  'アイドル',
  'パンク',
  'ブルース',
  'ファンク',
  'レゲエ',
  'サーフミュージック',
  'シティポップ',
  '昭和歌謡',
  'オルタナティブ',
];


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\constants\parts.js =====
// src/constants/parts.js
export const PARTS = [
  'ボーカル',
  'ギター',
  'ベース',
  'ドラム',
  'キーボード',
  'DTM',
  '作詞',
  '作曲',
  '編曲',
  'ミキシング',
  'プロデュース',
  'その他',
];


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\constants\prefectures.js =====
// src/constants/prefectures.js
export const PREFECTURES = [
  '北海道',
  '青森県',
  '岩手県',
  '宮城県',
  '秋田県',
  '山形県',
  '福島県',
  '茨城県',
  '栃木県',
  '群馬県',
  '埼玉県',
  '千葉県',
  '東京都',
  '神奈川県',
  '新潟県',
  '富山県',
  '石川県',
  '福井県',
  '山梨県',
  '長野県',
  '岐阜県',
  '静岡県',
  '愛知県',
  '三重県',
  '滋賀県',
  '京都府',
  '大阪府',
  '兵庫県',
  '奈良県',
  '和歌山県',
  '鳥取県',
  '島根県',
  '岡山県',
  '広島県',
  '山口県',
  '徳島県',
  '香川県',
  '愛媛県',
  '高知県',
  '福岡県',
  '佐賀県',
  '長崎県',
  '熊本県',
  '大分県',
  '宮崎県',
  '鹿児島県',
  '沖縄県',
];


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\hooks\useUnreadNotifications.js =====
//src/hooks/useUnredNotifications.js

import { useEffect, useState } from 'react';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';

export function useUnreadNotifications() {
  const [count, setCount] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const user = useAuthStore((state) => state.user);

  useEffect(() => {
    if (user?.id) {
      fetchUnreadCount();
    }
  }, [user]);

  const fetchUnreadCount = async () => {
    setIsLoading(true);
    const { count, error } = await supabase
      .from('notifications')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', user.id)
      .eq('read', false);
    if (!error) setCount(count);
    setIsLoading(false);
  };

  return { count, isLoading };
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\modals\BandPostModal.js =====
import React, { useState, useEffect } from 'react';
import {
  Modal,
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
  ScrollView,
  Switch,
  KeyboardAvoidingView,
  Platform,
  TouchableWithoutFeedback,
  Keyboard,
} from 'react-native';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';
import { PARTS } from '../constants/parts';
import { GENRES } from '../constants/genres';
import { PREFECTURES } from '../constants/prefectures';
import { DAYS } from '../constants/days';
import { DIRECTIONS } from '../constants/directions';
import { GENDERS } from '../constants/genders';

import CheckBoxGroup from '../components/forms/CheckBoxGroup';
import DropdownSelector from '../components/forms/DropdownSelector';

export default function BandPostModal({
  visible,
  onClose,
  onPostCreated,
  mode = 'create',
  initialData = {},
}) {
  const user = useAuthStore((state) => state.user);
  const isEdit = mode === 'edit';

  const [title, setTitle] = useState('');
  const [region, setRegion] = useState('');
  const [description, setDescription] = useState('');
  const [selectedParts, setSelectedParts] = useState([]);
  const [selectedGenres, setSelectedGenres] = useState([]);
  const [isPublic, setIsPublic] = useState(true);
  const [postToX, setPostToX] = useState(false);
  const [activityDays, setActivityDays] = useState([]);
  const [directions, setDirections] = useState([]);
  const [gender, setGender] = useState('');
  const [ageMin, setAgeMin] = useState('');
  const [ageMax, setAgeMax] = useState('');
  const [isBeginnerOk, setIsBeginnerOk] = useState(false);
  const [demoUrl, setDemoUrl] = useState('');

  useEffect(() => {
    if (isEdit && initialData) {
      setTitle(initialData.title || '');
      setRegion(initialData.region || '');
      setDescription(initialData.description || '');
      setSelectedParts(initialData.parts || []);
      setSelectedGenres(initialData.genres || []);
      setIsPublic(initialData.is_public ?? true);
      setPostToX(initialData.post_to_x ?? false);
      setActivityDays(initialData.activity_days || []);
      setDirections(initialData.directions || []);
      setGender(initialData.gender || '');
      setAgeMin(initialData.age_range?.split('~')[0] || '');
      setAgeMax(initialData.age_range?.split('~')[1] || '');
      setIsBeginnerOk(initialData.is_beginner_ok ?? false);
      setDemoUrl(initialData.demo_url || '');
    } else {
      setTitle('');
      setRegion('');
      setDescription('');
      setSelectedParts([]);
      setSelectedGenres([]);
      setIsPublic(true);
      setPostToX(false);
      setActivityDays([]);
      setDirections([]);
      setGender('');
      setAgeMin('');
      setAgeMax('');
      setIsBeginnerOk(false);
      setDemoUrl('');
    }
  }, [visible]);

  const handleSubmit = async () => {
    if (
      !title ||
      !region ||
      !description ||
      selectedParts.length === 0 ||
      selectedGenres.length === 0
    ) {
      Alert.alert('すべての項目を入力してください');
      return;
    }

    const payload = {
      user_id: user.id,
      title,
      region,
      description,
      parts: selectedParts,
      genres: selectedGenres,
      is_public: isPublic,
      post_to_x: postToX,
      activity_days: activityDays,
      directions,
      gender,
      age_range: ageMin && ageMax ? `${ageMin}~${ageMax}` : '',
      is_beginner_ok: isBeginnerOk,
      demo_url: demoUrl,
    };

    if (isEdit) {
      const { error } = await supabase
        .from('band_posts')
        .update(payload)
        .eq('id', initialData.id);
      if (error) return Alert.alert('更新に失敗しました', error.message);
    } else {
      const { error } = await supabase.from('band_posts').insert(payload);
      if (error) return Alert.alert('投稿に失敗しました', error.message);
    }

    onClose();
    onPostCreated();
  };

  return (
    <Modal visible={visible} animationType="slide" transparent>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View>
            <ScrollView>
              <Text>
                {isEdit ? '📝 投稿を編集' : '✍️ 新規投稿'}
              </Text>

              <TextInput
                placeholder="タイトル"
                value={title}
                onChangeText={setTitle}
              />

              <DropdownSelector
                label="地域"
                options={PREFECTURES}
                selected={region}
                onSelect={setRegion}
              />

              <CheckBoxGroup
                label="担当パート"
                options={PARTS}
                selected={selectedParts}
                onChange={setSelectedParts}
              />

              <CheckBoxGroup
                label="ジャンル"
                options={GENRES}
                selected={selectedGenres}
                onChange={setSelectedGenres}
              />

              <TextInput
                placeholder="内容を入力してください"
                value={description}
                onChangeText={setDescription}
                multiline
              />

              <CheckBoxGroup
                label="活動曜日"
                options={DAYS}
                selected={activityDays}
                onChange={setActivityDays}
              />

              <CheckBoxGroup
                label="活動スタイル"
                options={DIRECTIONS}
                selected={directions}
                onChange={setDirections}
              />

              <CheckBoxGroup
                label="募集性別"
                options={['男性', '女性', '不問']}
                selected={gender ? [gender] : []}
                onChange={(arr) => setGender(arr[0])}
              />

              <Text>募集年齢</Text>
              <View>
                <TextInput
                  placeholder="最低年齢"
                  keyboardType="numeric"
                  value={ageMin}
                  onChangeText={setAgeMin}
                />
                <Text>〜</Text>
                <TextInput
                  placeholder="最高年齢"
                  keyboardType="numeric"
                  value={ageMax}
                  onChangeText={setAgeMax}
                />
              </View>

              <Text>参考URL</Text>
              <TextInput
                placeholder="X・Instagram・DemoURLなど"
                value={demoUrl}
                onChangeText={setDemoUrl}
              />

              <View>
                <Text>初心者OK</Text>
                <Switch value={isBeginnerOk} onValueChange={setIsBeginnerOk} />
              </View>

              <View>
                <Text>公開する</Text>
                <Switch value={isPublic} onValueChange={setIsPublic} />
              </View>

              <View>
                <Text>Xにも投稿</Text>
                <Switch value={postToX} onValueChange={setPostToX} />
              </View>

              <View>
                <TouchableOpacity onPress={onClose}>
                  <Text>閉じる</Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={handleSubmit}>
                  <Text>{isEdit ? '更新' : '投稿'}</Text>
                </TouchableOpacity>
              </View>
            </ScrollView>
          </View>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    </Modal>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\modals\GroupChatRoomModal.js =====
import React, { useState, useEffect } from 'react';
import {
  Modal, View, Text, TextInput,
  TouchableOpacity, Alert, Switch, KeyboardAvoidingView,
  Platform, TouchableWithoutFeedback, Keyboard, ScrollView,
} from 'react-native';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';

export default function GroupChatRoomModal({
  visible,
  onClose,
  onCreated,
  initialData = {},
  mode = 'create',
}) {
  const user = useAuthStore((state) => state.user);
  const isEdit = mode === 'edit';

  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [password, setPassword] = useState('');
  const [isPublic, setIsPublic] = useState(true);
  const [maxMembers, setMaxMembers] = useState('50');
  const [notice, setNotice] = useState('');

  useEffect(() => {
    if (isEdit && initialData) {
      setName(initialData.name || '');
      setDescription(initialData.description || '');
      setPassword(initialData.password || '');
      setIsPublic(initialData.is_public ?? true);
      setMaxMembers(initialData.max_members?.toString() || '50');
      setNotice(initialData.notice || '');
    } else {
      setName('');
      setDescription('');
      setPassword('');
      setIsPublic(true);
      setMaxMembers('50');
      setNotice('');
    }
  }, [visible]);

  const handleSubmit = async () => {
    if (!name || !maxMembers) {
      Alert.alert('必須項目を入力してください');
      return;
    }
    const payload = {
      name,
      description,
      owner_id: user.id,
      password: password || null,
      is_public: isPublic,
      max_members: Number(maxMembers),
      notice,
    };
    let error;
    if (isEdit) {
      ({ error } = await supabase.from('group_chat_rooms').update(payload).eq('id', initialData.id));
    } else {
      ({ error } = await supabase.from('group_chat_rooms').insert(payload));
    }
    if (error) return Alert.alert('ルームの作成・編集に失敗しました', error.message);

    onClose();
    onCreated?.();
  };

  return (
    <Modal visible={visible} animationType="slide" transparent>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View>
            <ScrollView>
              <Text>
                {isEdit ? 'ルーム編集' : 'グループチャットルーム作成'}
              </Text>
              <TextInput
                placeholder="ルーム名"
                value={name}
                onChangeText={setName}
                maxLength={24}
              />
              <TextInput
                placeholder="説明 (任意)"
                value={description}
                onChangeText={setDescription}
                multiline
              />
              <TextInput
                placeholder="パスワード (任意)"
                value={password}
                onChangeText={setPassword}
                secureTextEntry
              />
              <TextInput
                placeholder="最大人数 (10~100)"
                value={maxMembers}
                onChangeText={setMaxMembers}
                keyboardType="numeric"
                maxLength={3}
              />
              <TextInput
                placeholder="ルームの案内・お知らせ (任意)"
                value={notice}
                onChangeText={setNotice}
                multiline
              />

              <View>
                <Text>公開ルーム</Text>
                <Switch value={isPublic} onValueChange={setIsPublic} />
              </View>
              <View>
                <TouchableOpacity onPress={onClose}>
                  <Text>閉じる</Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={handleSubmit}>
                  <Text>{isEdit ? '編集' : '作成'}</Text>
                </TouchableOpacity>
              </View>
            </ScrollView>
          </View>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    </Modal>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\modals\NotificationsModal.js =====
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
  ActivityIndicator,
  KeyboardAvoidingView,
  TouchableWithoutFeedback,
  Keyboard,
  Modal,
  Platform,
} from 'react-native';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';
import { useNavigation } from '@react-navigation/native';
import BackFAB from '../components/ui/BackFAB';
import { getNotificationMessage } from '../utils/notifications';

export default function NotificationsModal({
  visible,
  onClose,
  onProfileSelect,
}) {
  const user = useAuthStore((state) => state.user);
  const navigation = useNavigation();
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (visible) {
      fetchNotifications();
    } else {
      setNotifications([]);
    }
  }, [visible]);

  const fetchNotifications = async () => {
    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('notifications')
        .select(`*, from:users(id, nickname, avatar_url)`)
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (!error) setNotifications(data || []);
    } finally {
      setLoading(false);
    }
  };

  const markAsRead = async (id) => {
    await supabase.from('notifications').update({ read: true }).eq('id', id);
    fetchNotifications();
  };

  const renderItem = ({ item }) => {
    const { type, read, from } = item;

    return (
      <TouchableOpacity
        onPress={() => {
          markAsRead(item.id);
          onProfileSelect?.(from);
        }}
      >
        <Text>
          {getNotificationMessage(type, from?.nickname)}
        </Text>
        <Text>
          {new Date(item.created_at).toLocaleString('ja-JP')}
        </Text>
      </TouchableOpacity>
    );
  };

  return (
    <Modal visible={visible} animationType="slide" transparent>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View>
            <View>
              {loading ? (
                <ActivityIndicator size="large" />
              ) : (
                <FlatList
                  data={notifications}
                  keyExtractor={(item) => item.id.toString()}
                  renderItem={renderItem}
                  ListEmptyComponent={<Text>通知はまだありません</Text>}
                />
              )}
            </View>
            <BackFAB onPress={onClose} />
          </View>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    </Modal>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\modals\OnboardingModal.js =====
import React, { useState, useEffect } from 'react';
import {
  Modal,
  View,
  Text,
  TextInput,
  TouchableWithoutFeedback,
  Keyboard,
  Alert,
  TouchableOpacity,
  ScrollView,
  Image,
  Platform,
  ActivityIndicator,
  KeyboardAvoidingView,
} from 'react-native';
import DateTimePickerModal from 'react-native-modal-datetime-picker';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';
import * as ImagePicker from 'expo-image-picker';
import Constants from 'expo-constants';
import CheckBoxGroup from '../components/forms/CheckBoxGroup';
import { PARTS } from '../constants/parts';
import { GENRES } from '../constants/genres';
import { PREFECTURES } from '../constants/prefectures';
import { format } from 'date-fns';
import { ja } from 'date-fns/locale';

export default function OnboardingModal({
  visible,
  onClose,
  initialProfile = {},
  mode = 'onboarding',
}) {
  const user = useAuthStore((state) => state.user);
  const [nickname, setNickname] = useState('');
  const [gender, setGender] = useState('');
  const [birthday, setBirthday] = useState('');
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [region, setRegion] = useState(PREFECTURES[0]);
  const [parts, setParts] = useState([]);
  const [genres, setGenres] = useState([]);
  const [song, setSong] = useState('');
  const [meaning, setMeaning] = useState('');
  const [intro, setIntro] = useState('');
  const [selfIntro, setSelfIntro] = useState('');
  const [avatarUrl, setAvatarUrl] = useState('');
  const [avatar, setAvatar] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (visible) {
      setLoading(true);
      setTimeout(() => {
        if (initialProfile && Object.keys(initialProfile).length > 0) {
          applyInitialValues();
        }
        setLoading(false);
      }, 100);
    }
  }, [visible, initialProfile]);

  const applyInitialValues = () => {
    if (!initialProfile || Object.keys(initialProfile).length === 0) return;
    setNickname(initialProfile.nickname ?? '');
    setGender(initialProfile.gender ?? '');
    setBirthday(initialProfile.birthday ?? '');
    setRegion(initialProfile.region ?? PREFECTURES[0]);
    setParts(initialProfile.parts?.split(',') ?? []);
    setGenres(initialProfile.genres?.split(',') ?? []);
    setSong(initialProfile.song ?? '');
    setMeaning(initialProfile.meaning ?? '');
    setIntro(initialProfile.intro ?? '');
    setSelfIntro(initialProfile.self_intro ?? '');
    setAvatarUrl(initialProfile.avatar_url ?? '');
  };

  const pickImage = async () => {
    const permissionResult =
      await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (!permissionResult.granted) {
      Alert.alert('アクセス拒否', '画像アクセスを許可してください。');
      return;
    }
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      quality: 0.7,
    });
    if (!result.canceled) {
      setAvatar(result.assets[0].uri);
    }
  };

  const handleDateConfirm = (date) => {
    setBirthday(format(date, 'yyyy-MM-dd', { locale: ja }));
    setShowDatePicker(false);
  };

  const handleSave = async () => {
    if (
      !nickname ||
      !gender ||
      !birthday ||
      !region ||
      parts.length === 0 ||
      !song ||
      !meaning ||
      !intro ||
      !selfIntro
    ) {
      Alert.alert('全ての項目を入力してください。');
      return;
    }
    if (
      song.length > 50 ||
      meaning.length > 50 ||
      intro.length > 50 ||
      selfIntro.length > 300
    ) {
      Alert.alert('入力制限を超えました。');
      return;
    }

    let avatar_url = avatarUrl;
    if (avatar) {
      const ext = avatar.split('.').pop();
      const fileName = `${user.id}_${Date.now()}.${ext}`;
      const { error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(`public/${fileName}`, {
          uri: avatar,
          type: 'image/jpeg',
          name: fileName,
        });
      if (uploadError) {
        Alert.alert('画像アップロード失敗', uploadError.message);
        return;
      }
      const { SUPABASE_URL } = Constants.expoConfig.extra;
      avatar_url = `${SUPABASE_URL}/storage/v1/object/public/avatars/public/${fileName}`;
    }

    const { data, error } = await supabase
      .from('users')
      .update({
        nickname,
        gender,
        birthday,
        region,
        parts: parts.join(','),
        genres: genres.join(','),
        song,
        meaning,
        intro,
        self_intro: selfIntro,
        avatar_url,
      })
      .eq('id', user.id)
      .select();

    if (error) {
      Alert.alert('保存に失敗しました。', error.message);
    } else if (!data || data.length === 0) {
      Alert.alert('更新できませんでした。ユーザー情報が見つかりません。');
    } else {
      Alert.alert(
        mode === 'edit' ? '変更完了' : 'ようこそ！',
        'プロフィールが保存されました。',
      );
      onClose();
    }
  };

  if (loading) {
    return (
      <Modal visible={visible} transparent animationType="slide">
        <View>
          <ActivityIndicator size="large" />
        </View>
      </Modal>
    );
  }

  return (
    <Modal visible={visible} transparent animationType="slide">
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View>
            <ScrollView>
              <Text>
                {mode === 'edit' ? '🛠 プロフィール編集' : '👋 初めまして！'}
              </Text>
              {avatar ? (
                <Image source={{ uri: avatar }} />
              ) : avatarUrl ? (
                <Image source={{ uri: avatarUrl }} />
              ) : (
                <TouchableOpacity onPress={pickImage}>
                  <Text>画像</Text>
                </TouchableOpacity>
              )}

              <Text>ニックネーム</Text>
              <TextInput
                value={nickname}
                onChangeText={setNickname}
                placeholder="例: たろう"
              />

              <Text>性別</Text>
              <View>
                {['男性', '女性', '指定なし'].map((item) => (
                  <TouchableOpacity
                    key={item}
                    onPress={() => setGender(item)}
                  >
                    <Text>{item}</Text>
                  </TouchableOpacity>
                ))}
              </View>

              <Text>生年月日</Text>
              <TouchableOpacity
                onPress={() => setShowDatePicker(true)}
              >
                <Text>{birthday || '選択してください'}</Text>
              </TouchableOpacity>
              <DateTimePickerModal
                isVisible={showDatePicker}
                mode="date"
                onConfirm={handleDateConfirm}
                onCancel={() => setShowDatePicker(false)}
              />

              <Text>地域</Text>
              <ScrollView>
                {PREFECTURES.map((item) => (
                  <TouchableOpacity
                    key={item}
                    onPress={() => setRegion(item)}
                  >
                    <Text>{item}</Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>

              <Text>パート</Text>
              <CheckBoxGroup
                options={PARTS}
                selected={parts}
                onChange={setParts}
              />

              <Text>ジャンル</Text>
              <CheckBoxGroup
                options={GENRES}
                selected={genres}
                onChange={setGenres}
              />

              <Text>好きな曲</Text>
              <TextInput
                value={song}
                onChangeText={setSong}
                placeholder="50文字以内"
              />

              <Text>その曲の好きな理由</Text>
              <TextInput
                value={meaning}
                onChangeText={setMeaning}
                placeholder="50文字以内"
              />

              <Text>音楽を始めたきっかけ</Text>
              <TextInput
                value={intro}
                onChangeText={setIntro}
                placeholder="50文字以内"
              />

              <Text>自己紹介</Text>
              <TextInput
                value={selfIntro}
                onChangeText={setSelfIntro}
                placeholder="300文字以内"
                multiline
              />

              <TouchableOpacity onPress={handleSave}>
                <Text>保存</Text>
              </TouchableOpacity>
            </ScrollView>
          </View>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    </Modal>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\modals\ProfileEditModal.js =====
import React, { useEffect, useState } from 'react';
import { Alert, Modal, View, ActivityIndicator } from 'react-native';
import OnboardingModal from './OnboardingModal';
import { useAuthStore } from '../store/useAuthStore';
import { supabase } from '../api/supabaseClient';

export default function ProfileEditModal({ visible, onClose }) {
  const user = useAuthStore((state) => state.user);
  const [profile, setProfile] = useState(null);

  useEffect(() => {
    if (!visible) return;

    const fetchProfile = async () => {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single();

      if (error) {
        Alert.alert('エラー', 'プロフィールの取得に失敗しました');
      } else {
        setProfile(data);
      }
    };

    fetchProfile();
  }, [visible]);

  const handleClose = () => {
    onClose?.();
    Alert.alert('完了', 'プロフィール編集を終了しました。');
  };

  if (!profile) {
    return (
      <Modal visible={visible} transparent animationType="slide">
        <View>
          <ActivityIndicator size="large" />
        </View>
      </Modal>
    );
  }

  return (
    <Modal visible={visible} animationType="slide" transparent>
      {profile ? (
        <View>
          <OnboardingModal
            visible={true}
            onClose={handleClose}
            initialProfile={profile}
            mode="edit"
          />
        </View>
      ) : (
        <View>
          <ActivityIndicator size="large" />
        </View>
      )}
    </Modal>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\modals\ProfileViewModal.js =====
import React, { useEffect, useState } from 'react';
import {
  Modal,
  View,
  Text,
  Image,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';
import CommentList from '../components/forms/CommentList';
import BackFAB from '../components/ui/BackFAB';

export default function ProfileViewModal({ visible, profile, onClose }) {
  const currentUser = useAuthStore((state) => state.user);

  const isSelf = currentUser?.id === profile?.id;

  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [likeCount, setLikeCount] = useState(0);
  const [hasLiked, setHasLiked] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!visible || !profile?.id) return;
    fetchData();
  }, [visible, profile]);

  const fetchData = async () => {
    setLoading(true);
    await Promise.all([fetchComments(), fetchLikeCount(), checkIfLiked()]);
    setLoading(false);
  };

  const fetchComments = async () => {
    const { data } = await supabase
      .from('comments')
      .select('*, from_user_id!inner(nickname, avatar_url)')
      .eq('to_user_id', profile.id)
      .order('created_at', { ascending: false });
    setComments(data || []);
  };

  const fetchLikeCount = async () => {
    const { count } = await supabase
      .from('likes')
      .select('*', { count: 'exact', head: true })
      .eq('to_user_id', profile.id);
    setLikeCount(count || 0);
  };

  const checkIfLiked = async () => {
    const { data } = await supabase
      .from('likes')
      .select('id')
      .eq('from_user_id', currentUser.id)
      .eq('to_user_id', profile.id);
    setHasLiked(data?.length > 0);
  };

  const handleLike = async () => {
    if (isSelf || hasLiked) return;

    const { data, error } = await supabase
      .from('likes')
      .insert({ from_user_id: currentUser.id, to_user_id: profile.id })
      .select()
      .single();

    if (!error && data) {
      setHasLiked(true);
      setLikeCount((prev) => prev + 1);
      await supabase.from('notifications').insert({
        user_id: profile.id,
        type: 'like',
        reference_id: data.id,
      });
    } else {
      Alert.alert('エラー', 'いいねに失敗しました');
    }
  };

  const handleCommentSubmit = async () => {
    if (!newComment.trim()) return;
    const { data, error } = await supabase
      .from('comments')
      .insert({
        from_user_id: currentUser.id,
        to_user_id: profile.id,
        content: newComment,
      })
      .select()
      .single();

    if (!error && data) {
      await supabase.from('notifications').insert({
        user_id: profile.id,
        type: 'comment',
        reference_id: data.id,
      });
      setNewComment('');
      fetchComments();
    } else {
      Alert.alert('エラー', 'コメント投稿に失敗しました');
    }
  };

  return (
    <Modal visible={visible} animationType="slide" transparent>
      <View>
        <ScrollView>
          <View>
            <Image source={{ uri: profile.avatar_url }} />
            <Text>{profile.nickname}</Text>
            <View />

            <View>
              <Text>性別</Text>
              <Text>{profile.gender || '未設定'}</Text>

              <Text>生年月日</Text>
              <Text>{profile.birthday || '未設定'}</Text>

              <Text>地域</Text>
              <Text>{profile.region || '未設定'}</Text>

              <Text>人生曲</Text>
              <Text>{profile.song || '未設定'}</Text>

              <Text>バンドとは</Text>
              <Text>{profile.meaning || '未設定'}</Text>

              <Text>一言紹介</Text>
              <Text>{profile.intro || '未設定'}</Text>

              <Text>自己紹介</Text>
              <Text>{profile.self_intro || '未設定'}</Text>
            </View>

            <View>
              <Text>❤️ いいね数: {likeCount}</Text>
              {!isSelf && !hasLiked && (
                <TouchableOpacity onPress={handleLike}>
                  <Text>👍 いいね</Text>
                </TouchableOpacity>
              )}
            </View>
          </View>

          <View>
            <Text>💬 コメント</Text>
            {loading ? (
              <ActivityIndicator />
            ) : comments.length === 0 ? (
              <Text>まだコメントがありません</Text>
            ) : (
              <CommentList
                comments={comments}
                currentUserId={currentUser.id}
                onDeleted={fetchComments}
              />
            )}

            {!isSelf && (
              <View>
                <TextInput
                  placeholder="コメントを入力..."
                  value={newComment}
                  onChangeText={setNewComment}
                />
                <TouchableOpacity onPress={handleCommentSubmit}>
                  <Text>投稿</Text>
                </TouchableOpacity>
              </View>
            )}
          </View>
        </ScrollView>
        <BackFAB onPress={onClose} />
      </View>
    </Modal>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\modals\SearchModal.js =====
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Modal,
  ActivityIndicator,
  FlatList,
  KeyboardAvoidingView,
  TouchableWithoutFeedback,
  Keyboard,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { supabase } from '../api/supabaseClient';
import BackFAB from '../components/ui/BackFAB';

const CATEGORIES = ['ユーザー', 'バンド', 'セッション', 'コミュニティ'];

export default function SearchModal({
  visible,
  onClose,
  onSearch,
  onProfileSelect,
}) {
  const navigation = useNavigation();

  const [keyword, setKeyword] = useState('');
  const [category, setCategory] = useState('ユーザー');
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!keyword.trim()) {
      setResults([]);
      return;
    }
    const timer = setTimeout(() => {
      fetchResults();
    }, 400);

    return () => clearTimeout(timer);
  }, [keyword, category]);

  const fetchResults = async () => {
    setLoading(true);
    let query;

    if (category === 'ユーザー') {
      query = supabase
        .from('users')
        .select('id, nickname, avatar_url, region')
        .ilike('nickname', `%${keyword}%`);
    } else {
      const table = category === 'バンド' ? 'band_posts' : 'session_posts';
      query = supabase
        .from(table)
        .select('id, title, region')
        .ilike('title', `%${keyword}%`);
    }

    const { data } = await query;
    setResults(data || []);
    setLoading(false);
  };

  const handleSubmit = () => {
    if (!keyword.trim()) return;
    if (onSearch) {
      onSearch({ keyword: keyword.trim(), category });
      onClose();
    }
  };

  const handleResultPress = (item) => {
    if (category === 'ユーザー' && onProfileSelect) {
      onProfileSelect(item);
    } else {
      onClose();
      navigation.navigate(
        category === 'バンド' ? 'BandDetail' : 'SessionDetail',
        { post: item },
      );
    }
  };

  const renderItem = ({ item }) => (
    <TouchableOpacity onPress={() => handleResultPress(item)}>
      <Text>
        {item.nickname || item.title}（{item.region || '地域未設定'}）
      </Text>
    </TouchableOpacity>
  );

  return (
    <Modal visible={visible} animationType="slide" transparent>
      <KeyboardAvoidingView
        behavior="padding"
      >
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View>
            <View>
              <Text>カテゴリ</Text>
              <View>
                {CATEGORIES.map((c) => (
                  <TouchableOpacity
                    key={c}
                    onPress={() => setCategory(c)}
                  >
                    <Text>
                      {c}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
              <TextInput
                placeholder="キーワードを入力..."
                value={keyword}
                onChangeText={setKeyword}
                returnKeyType="search"
                onSubmitEditing={handleSubmit}
              />
            </View>

            {loading ? (
              <ActivityIndicator />
            ) : results.length === 0 ? (
              <Text>
                該当する{category}はありません
              </Text>
            ) : (
              <>
                <Text>
                  🔍 検索結果（最大20件表示）
                </Text>
                <FlatList
                  data={results.slice(0, 20)}
                  keyExtractor={(item) => item.id?.toString()}
                  renderItem={renderItem}
                />
                {results.length > 5 && (
                  <TouchableOpacity
                    onPress={() => {
                      onClose();
                      navigation.navigate('SearchResults', {
                        keyword,
                        category,
                      });
                    }}
                  >
                    <Text>さらに見る ▶</Text>
                  </TouchableOpacity>
                )}
              </>
            )}

            <BackFAB onPress={onClose} />
          </View>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    </Modal>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\modals\SessionPostModal.js =====
import React, { useState, useEffect } from 'react';
import {
  Modal,
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
  ScrollView,
  Switch,
  KeyboardAvoidingView,
  Platform,
  TouchableWithoutFeedback,
  Keyboard,
} from 'react-native';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';
import { PARTS } from '../constants/parts';
import { GENRES } from '../constants/genres';
import { PREFECTURES } from '../constants/prefectures';
import { DAYS } from '../constants/days';
import { DIRECTIONS } from '../constants/directions';
import CheckBoxGroup from '../components/forms/CheckBoxGroup';
import DropdownSelector from '../components/forms/DropdownSelector';

export default function SessionPostModal({
  visible,
  onClose,
  onPostCreated,
  mode = 'create',
  initialData = {},
}) {
  const user = useAuthStore((state) => state.user);
  const isEdit = mode === 'edit';

  const [title, setTitle] = useState('');
  const [region, setRegion] = useState('');
  const [description, setDescription] = useState('');
  const [selectedParts, setSelectedParts] = useState([]);
  const [selectedGenres, setSelectedGenres] = useState([]);
  const [isPublic, setIsPublic] = useState(true);
  const [postToX, setPostToX] = useState(false);
  const [activityDays, setActivityDays] = useState([]);
  const [directions, setDirections] = useState([]);
  const [gender, setGender] = useState('');
  const [ageMin, setAgeMin] = useState('');
  const [ageMax, setAgeMax] = useState('');
  const [isBeginnerOk, setIsBeginnerOk] = useState(false);
  const [demoUrl, setDemoUrl] = useState('');

  useEffect(() => {
    if (isEdit && initialData) {
      setTitle(initialData.title || '');
      setRegion(initialData.region || '');
      setDescription(initialData.description || '');
      setSelectedParts(initialData.parts || []);
      setSelectedGenres(initialData.genres || []);
      setIsPublic(initialData.is_public ?? true);
      setPostToX(initialData.post_to_x ?? false);
      setActivityDays(initialData.activity_days || []);
      setDirections(initialData.directions || []);
      setGender(initialData.gender || '');
      setAgeMin(initialData.age_range?.split('~')[0] || '');
      setAgeMax(initialData.age_range?.split('~')[1] || '');
      setIsBeginnerOk(initialData.is_beginner_ok ?? false);
      setDemoUrl(initialData.demo_url || '');
    } else {
      setTitle('');
      setRegion('');
      setDescription('');
      setSelectedParts([]);
      setSelectedGenres([]);
      setIsPublic(true);
      setPostToX(false);
      setActivityDays([]);
      setDirections([]);
      setGender('');
      setAgeMin('');
      setAgeMax('');
      setIsBeginnerOk(false);
      setDemoUrl('');
    }
  }, [visible]);

  const handleSubmit = async () => {
    if (
      !title ||
      !region ||
      !description ||
      selectedParts.length === 0 ||
      selectedGenres.length === 0
    ) {
      Alert.alert('全ての項目を入力してください');
      return;
    }

    const payload = {
      user_id: user.id,
      title,
      region,
      description,
      parts: selectedParts,
      genres: selectedGenres,
      is_public: isPublic,
      post_to_x: postToX,
      activity_days: activityDays,
      directions,
      gender,
      age_range: ageMin && ageMax ? `${ageMin}~${ageMax}` : '',
      is_beginner_ok: isBeginnerOk,
      demo_url: demoUrl,
    };

    const method = isEdit ? 'update' : 'insert';
    const table = 'session_posts';
    const query = isEdit
      ? supabase.from(table).update(payload).eq('id', initialData.id)
      : supabase.from(table).insert(payload);

    const { error } = await query;
    if (error)
      return Alert.alert(isEdit ? '更新失敗' : '投稿失敗', error.message);

    onClose();
    onPostCreated();
  };

  return (
    <Modal visible={visible} animationType="slide" transparent>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <ScrollView>
            <View>
              <Text>
                {isEdit ? '📝 投稿を編集' : '✍️ セッション募集'}
              </Text>

              <TextInput
                placeholder="タイトル"
                value={title}
                onChangeText={setTitle}
              />

              <DropdownSelector
                label="地域"
                options={PREFECTURES}
                selected={region}
                onSelect={setRegion}
              />
              <CheckBoxGroup
                label="担当パート"
                options={PARTS}
                selected={selectedParts}
                onChange={setSelectedParts}
              />
              <CheckBoxGroup
                label="ジャンル"
                options={GENRES}
                selected={selectedGenres}
                onChange={setSelectedGenres}
              />

              <TextInput
                placeholder="内容"
                value={description}
                onChangeText={setDescription}
                multiline
              />

              <CheckBoxGroup
                label="活動曜日"
                options={DAYS}
                selected={activityDays}
                onChange={setActivityDays}
              />
              <CheckBoxGroup
                label="活動方向性"
                options={DIRECTIONS}
                selected={directions}
                onChange={setDirections}
              />
              <CheckBoxGroup
                label="募集性別"
                options={['男性', '女性', '不問']}
                selected={gender ? [gender] : []}
                onChange={(arr) => setGender(arr[0])}
              />

              <Text>募集年齢</Text>
              <View>
                <TextInput
                  placeholder="最低年齢"
                  keyboardType="numeric"
                  value={ageMin}
                  onChangeText={setAgeMin}
                />
                <Text>〜</Text>
                <TextInput
                  placeholder="最高年齢"
                  keyboardType="numeric"
                  value={ageMax}
                  onChangeText={setAgeMax}
                />
              </View>

              <Text>参考URL</Text>
              <TextInput
                placeholder="X ・ Instagram ・ DemoURL など"
                value={demoUrl}
                onChangeText={setDemoUrl}
              />

              <View>
                <Text>初心者OK</Text>
                <Switch
                  value={isBeginnerOk}
                  onValueChange={setIsBeginnerOk}
                />
              </View>
              <View>
                <Text>公開する</Text>
                <Switch value={isPublic} onValueChange={setIsPublic} />
              </View>
              <View>
                <Text>Xにも投稿</Text>
                <Switch value={postToX} onValueChange={setPostToX} />
              </View>

              <View>
                <TouchableOpacity onPress={onClose}>
                  <Text>閉じる</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  onPress={handleSubmit}
                >
                  <Text>{isEdit ? '更新' : '投稿'}</Text>
                </TouchableOpacity>
              </View>
            </View>
          </ScrollView>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    </Modal>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\modals\UserMiniModal.js =====
import React from 'react';
import { Modal, View, Text, TouchableOpacity } from 'react-native';
import ProfileImage from '../components/ui/ProfileImage';

export default function UserMiniModal({ visible, user, onClose, onViewProfile, onChat }) {
  if (!user) return null;
  return (
    <Modal visible={visible} transparent animationType="fade">
      <View>
        <View>
          <ProfileImage uri={user.avatar_url} size={64} />
          <Text>{user.nickname}</Text>
          {user.region && <Text>地域: {user.region}</Text>}
          {user.parts && <Text>パート: {user.parts}</Text>}
          <View>
            <TouchableOpacity onPress={onViewProfile}>
              <Text>プロフィールを見る</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={onChat}>
              <Text>チャットする</Text>
            </TouchableOpacity>
          </View>
          <TouchableOpacity onPress={onClose}>
            <Text>閉じる</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\navigation\AuthStack.js =====
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { navigationRef } from './navigationRef';

import SignInScreen from '../screens/SignInScreen';
import SignUpScreen from '../screens/SignUpScreen';
import BandDetailScreen from '../screens/BandDetailScreen';
import SessionDetailScreen from '../screens/SessionDetailScreen';
import SearchResultsScreen from '../screens/SearchResultsScreen';
import PrivateChatRoomScreen from '../screens/PrivateChatRoomScreen';
import GroupChatRoomScreen from '../screens/GroupChatRoomScreen';
import MainWrapper from './MainWrapper';

const Stack = createNativeStackNavigator();

export default function AuthStack() {
  return (
    <NavigationContainer ref={navigationRef}>
      <Stack.Navigator screenOptions={{ headerShown: false }}>
        <Stack.Screen name="SignIn" component={SignInScreen} />
        <Stack.Screen name="SignUp" component={SignUpScreen} />
        <Stack.Screen name="Main" component={MainWrapper} />
        <Stack.Screen name="SearchResults" component={SearchResultsScreen} />
        <Stack.Screen name="BandDetail" component={BandDetailScreen} />
        <Stack.Screen name="SessionDetail" component={SessionDetailScreen} />
        <Stack.Screen name="PrivateChatRoom" component={PrivateChatRoomScreen} />
        <Stack.Screen name="GroupChatRoom" component={GroupChatRoomScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\navigation\BandStackNavigator.js =====
import React from 'react';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import BandListScreen from '../screens/BandListScreen';
import BandDetailScreen from '../screens/BandDetailScreen';

const Stack = createNativeStackNavigator();

export default function BandStackNavigator() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="BandList"
        component={BandListScreen}
        options={{ headerShown: false }}
      />
      <Stack.Screen
        name="BandDetail"
        component={BandDetailScreen}
        options={{ headerShown: false }}
      />
    </Stack.Navigator>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\navigation\DrawerNavigator.js =====
import React from 'react';
import { createDrawerNavigator } from '@react-navigation/drawer';
import { TouchableOpacity, View, Text } from 'react-native';
import Icon from 'react-native-vector-icons/Ionicons';
import { useNavigation } from '@react-navigation/native';
import { useUnreadNotifications } from '../hooks/useUnreadNotifications';

import ChatScreen from '../screens/ChatScreen';
import CommunityScreen from '../screens/CommunityScreen';
import StudioScreen from '../screens/StudioScreen';
import SettingsScreen from '../screens/SettingsScreen';
import BandStackNavigator from './BandStackNavigator';
import SessionStackNavigator from './SessionStackNavigator';

const Drawer = createDrawerNavigator();

function NotificationBell({ onPress }) {
  const unreadCount = useUnreadNotifications();

  return (
    <TouchableOpacity onPress={onPress}>
      <View>
        <Icon name="notifications-outline" size={24} color="#000" />
        {unreadCount > 0 && (
          <View>
            <Text>{unreadCount}</Text>
          </View>
        )}
      </View>
    </TouchableOpacity>
  );
}

// 일본어 네이티브 스타일로 타이틀 및 버튼명 현지화
function screenOptions(title, onOpenNotifications, onOpenSearch) {
  return ({ navigation }) => ({
    headerTitle: title,
    headerLeft: () => (
      <TouchableOpacity onPress={() => navigation.openDrawer()}>
        <Icon name="menu" size={24} color="#000" />
      </TouchableOpacity>
    ),
    headerRight: () => (
      <View style={{ flexDirection: 'row', alignItems: 'center' }}>
        <TouchableOpacity onPress={onOpenSearch}>
          <Icon
            name="search-outline"
            size={24}
            color="#000"
          />
        </TouchableOpacity>
        <NotificationBell onPress={onOpenNotifications} />
      </View>
    ),
  });
}

export default function DrawerNavigator({ onOpenNotifications, onOpenSearch }) {
  return (
    <Drawer.Navigator initialRouteName="Band">
      <Drawer.Screen
        name="Band"
        component={BandStackNavigator}
        options={screenOptions('バンド募集', onOpenNotifications, onOpenSearch)}
      />
      <Drawer.Screen
        name="Session"
        component={SessionStackNavigator}
        options={screenOptions(
          'メンバー募集',
          onOpenNotifications,
          onOpenSearch,
        )}
      />
      <Drawer.Screen
        name="Chat"
        component={ChatScreen}
        options={screenOptions('チャット', onOpenNotifications, onOpenSearch)}
      />
      <Drawer.Screen
        name="Community"
        component={CommunityScreen}
        options={screenOptions(
          'コミュニティ',
          onOpenNotifications,
          onOpenSearch,
        )}
      />
      <Drawer.Screen
        name="Studio"
        component={StudioScreen}
        options={screenOptions(
          'スタジオ探し',
          onOpenNotifications,
          onOpenSearch,
        )}
      />
      <Drawer.Screen
        name="Settings"
        component={SettingsScreen}
        options={screenOptions('設定', onOpenNotifications, onOpenSearch)}
      />
    </Drawer.Navigator>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\navigation\MainWrapper.js =====
import React, { useEffect, useState } from 'react';
import { View, ActivityIndicator } from 'react-native';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';
import { navigationRef } from './navigationRef';

import DrawerNavigator from './DrawerNavigator';
import OnboardingModal from '../modals/OnboardingModal';
import ProfileViewModal from '../modals/ProfileViewModal';
import ProfileEditModal from '../modals/ProfileEditModal';
import NotificationsModal from '../modals/NotificationsModal';
import SearchModal from '../modals/SearchModal';

export default function MainWrapper() {
  const user = useAuthStore((state) => state.user);
  const [loading, setLoading] = useState(true);
  const [showOnboarding, setShowOnboarding] = useState(false);
  const [showProfileViewModal, setShowProfileViewModal] = useState(false);
  const [showProfileEditModal, setShowProfileEditModal] = useState(false);
  const [showNotificationsModal, setShowNotificationsModal] = useState(false);
  const [showSearchModal, setShowSearchModal] = useState(false);
  const [profileData, setProfileData] = useState(null);

  useEffect(() => {
    const checkProfile = async () => {
      if (!user?.id) return;
      const { data } = await supabase
        .from('users')
        .select('song, meaning, self_intro')
        .eq('id', user.id)
        .single();
      if (!data?.song || !data?.meaning || !data?.self_intro) {
        setShowOnboarding(true);
      }
      setLoading(false);
    };
    checkProfile();
  }, [user]);

  useEffect(() => {
    global.openNotificationsModal = () => setShowNotificationsModal(true);
    global.openSearchModal = () => setShowSearchModal(true);
    global.openProfileViewModal = (profile) => {
      setProfileData(profile);
      setShowProfileViewModal(true);
    };
    global.openProfileEditModal = () => setShowProfileEditModal(true);
  }, []);

  if (loading) {
    return <ActivityIndicator />;
  }

  return (
    <>
      <DrawerNavigator
        onOpenNotifications={() => setShowNotificationsModal(true)}
        onOpenSearch={() => setShowSearchModal(true)}
      />
      <OnboardingModal
        visible={showOnboarding}
        onClose={() => setShowOnboarding(false)}
        initialProfile={user}
      />

      {showProfileEditModal && (
        <ProfileEditModal onClose={() => setShowProfileEditModal(false)} />
      )}

      <NotificationsModal
        visible={showNotificationsModal}
        onClose={() => setShowNotificationsModal(false)}
        onProfileSelect={(profile) => {
          setProfileData(profile);
          setShowProfileViewModal(true);
        }}
      />
      {showProfileViewModal && profileData && (
        <ProfileViewModal
          visible={showProfileViewModal}
          profile={profileData}
          onClose={() => setShowProfileViewModal(false)}
        />
      )}

      {showSearchModal && (
        <SearchModal
          visible={true}
          onClose={() => setShowSearchModal(false)}
          onSearch={({ keyword, category }) => {
            setShowSearchModal(false);
            navigationRef.current?.navigate('SearchResults', {
              keyword,
              category,
            });
          }}
        />
      )}
    </>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\navigation\navigationRef.js =====
import { createNavigationContainerRef } from '@react-navigation/native';

export const navigationRef = createNavigationContainerRef();


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\navigation\SessionStackNavigator.js =====
import React from 'react';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import SessionListScreen from '../screens/SessionListScreen';
import SessionDetailScreen from '../screens/SessionDetailScreen';

const Stack = createNativeStackNavigator();

export default function SessionStackNavigator() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="SessionList"
        component={SessionListScreen}
        options={{ headerShown: false }}
      />
      <Stack.Screen
        name="SessionDetail"
        component={SessionDetailScreen}
        options={{ headerShown: false }}
      />
    </Stack.Navigator>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\BandDetailScreen.js =====
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  ScrollView,
  Alert,
} from 'react-native';
import { format } from 'date-fns';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';
import BandPostModal from '../modals/BandPostModal';
import BackFAB from '../components/ui/BackFAB';
import LikeButton from '../components/ui/LikeButton';
import CommentList from '../components/forms/CommentList';

export default function BandDetailScreen({ route, navigation }) {
  const { post } = route.params;
  const currentUser = useAuthStore((state) => state.user);
  const [profile, setProfile] = useState(null);
  const [editModal, setEditModal] = useState(false);

  useEffect(() => {
    fetchAuthorProfile();
  }, []);

  const fetchAuthorProfile = async () => {
    const { data } = await supabase
      .from('users')
      .select('nickname, avatar_url')
      .eq('id', post.user_id)
      .single();
    if (data) setProfile(data);
  };

  const handleDeletePost = async () => {
    Alert.alert('削除確認', 'この投稿を削除しますか？', [
      { text: 'キャンセル' },
      {
        text: '削除',
        style: 'destructive',
        onPress: async () => {
          const { error } = await supabase
            .from('band_posts')
            .delete()
            .eq('id', post.id);
          if (!error) {
            Alert.alert('削除されました');
            navigation.goBack();
          }
        },
      },
    ]);
  };

  const renderTagList = (emoji, label, list = []) => (
    <View>
      <Text>
        {emoji} {label}
      </Text>
      <View>
        {(list?.length > 0 ? list : ['-']).map((item, idx) => (
          <Text key={idx}>
            {item}
          </Text>
        ))}
      </View>
      <View />
    </View>
  );

  const renderAgeRange = () => (
    <View>
      <Text>🎂 募集年齢</Text>
      <Text>
        {post.age_range ? post.age_range.replace('~', '〜') + ' 歳' : '全年齢'}
      </Text>
      <View />
    </View>
  );

  const renderBeginnerOk = () => (
    <View>
      <Text>🐣 初心者OK</Text>
      <View>
        <View />
        <Text>{post.is_beginner_ok ? '' : ''}</Text>
      </View>
      <View />
    </View>
  );

  return (
    <View>
      <ScrollView>
        <View>
          <View>
            <View>
              <Text>
                「{post.region || 'こだわらない'}」{post.title}
              </Text>
              <Text>
                投稿日:{' '}
                {post.created_at
                  ? format(new Date(post.created_at), 'yyyy/MM/dd')
                  : '日付不明'}
              </Text>
            </View>
            <View>
              {profile && (
                <>
                  <Image
                    source={{ uri: profile.avatar_url }}
                  />
                  <Text>{profile.nickname}</Text>
                </>
              )}
            </View>
          </View>
          <View />
          {renderTagList('🎸', 'パート', post.parts)}
          {renderTagList('🎼', 'ジャンル', post.genres)}
          {renderTagList('📅', '活動曜日', post.activity_days)}
          {renderTagList('📍', '方向性', post.directions)}
          {renderTagList('👥', '募集性別', post.gender ? [post.gender] : [])}
          {renderAgeRange()}
          {renderTagList('🔗', 'URL', post.demo_url ? [post.demo_url] : [])}
          {renderBeginnerOk()}
          <View>
            <LikeButton to_user_id={post.user_id} />
            {currentUser.id === post.user_id && (
              <View>
                <TouchableOpacity onPress={() => setEditModal(true)}>
                  <Text>✏️ 編集</Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={handleDeletePost}>
                  <Text>🗑 削除</Text>
                </TouchableOpacity>
              </View>
            )}
          </View>
        </View>
        <CommentList to_user_id={post.user_id} />
      </ScrollView>
      <BackFAB />
      <BandPostModal
        visible={editModal}
        mode="edit"
        initialData={post}
        onClose={() => setEditModal(false)}
        onPostCreated={() => setEditModal(false)}
      />
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\BandListScreen.js =====
import React, { useEffect, useLayoutEffect, useState } from 'react';
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
} from 'react-native';
import { supabase } from '../api/supabaseClient';
import { format } from 'date-fns';
import BandPostModal from '../modals/BandPostModal';
import { useAuthStore } from '../store/useAuthStore';
import { useNavigation } from '@react-navigation/native';

export default function BandListScreen() {
  const [posts, setPosts] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const user = useAuthStore((state) => state.user);
  const navigation = useNavigation();

  useEffect(() => {
    fetchPosts();
  }, []);

  const fetchPosts = async () => {
    const { data } = await supabase
      .from('band_posts')
      .select('*')
      .order('created_at', { ascending: false });

    if (data) setPosts(data);
  };

  useLayoutEffect(() => {
    navigation.setOptions({
      headerShown: false,
    });
  }, [navigation]);

  return (
    <View>
      <FlatList
        data={posts}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity
            onPress={() => navigation.navigate('BandDetail', { post: item })}
          >
            <Text>{item.title}</Text>
            <Text>
              {item.region}・{format(new Date(item.created_at), 'yyyy/M/d')}
            </Text>
          </TouchableOpacity>
        )}
      />

      <TouchableOpacity onPress={() => setShowModal(true)}>
        <Text>＋</Text>
      </TouchableOpacity>

      <BandPostModal
        visible={showModal}
        onClose={() => setShowModal(false)}
        onPostCreated={fetchPosts}
      />
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\ChatScreen.js =====
import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, TouchableOpacity } from 'react-native';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';

export default function ChatScreen({ navigation }) {
  const user = useAuthStore((state) => state.user);
  const [rooms, setRooms] = useState([]);

  useEffect(() => {
    fetchRooms();
  }, []);

  const fetchRooms = async () => {
    const { data } = await supabase
      .from('private_chat_rooms')
      .select(`
        id,
        user1_id,
        user2_id,
        created_at,
        user1:users!private_chat_rooms_user1_id_fkey(nickname, avatar_url),
        user2:users!private_chat_rooms_user2_id_fkey(nickname, avatar_url)
      `)
      .or(`user1_id.eq.${user.id},user2_id.eq.${user.id}`);
    if (data) setRooms(data);
  };

  const getOtherUser = (room) =>
    room.user1_id === user.id ? room.user2 : room.user1;

  return (
    <View>
      <Text>自分の1:1チャットルーム</Text>
      <FlatList
        data={rooms}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => {
          const other = getOtherUser(item);
          return (
            <TouchableOpacity
              onPress={() => navigation.navigate('PrivateChatRoom', { roomId: item.id, otherUser: other })}
            >
              <Text>{other?.nickname || '-'}</Text>
            </TouchableOpacity>
          );
        }}
        ListEmptyComponent={<Text style={{ textAlign: 'center', color: '#aaa' }}>チャットルームがありません</Text>}
      />
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\CommunityScreen.js =====
import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, TouchableOpacity } from 'react-native';
import { supabase } from '../api/supabaseClient';
import GroupChatRoomModal from '../modals/GroupChatRoomModal';

export default function CommunityScreen({ navigation }) {
  const [rooms, setRooms] = useState([]);
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    fetchRooms();
  }, []);

  const fetchRooms = async () => {
    const { data } = await supabase
      .from('group_chat_rooms')
      .select('*')
      .order('created_at', { ascending: false });
    if (data) setRooms(data);
  };

  return (
    <View>
      <Text>グループチャットルーム一覧</Text>
      <FlatList
        data={rooms}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity
            onPress={() => navigation.navigate('GroupChatRoom', { roomId: item.id })}
          >
            <Text>{item.name}</Text>
            <Text>
              ({item.is_public ? '公開' : '非公開'}) | {item.max_members}人
            </Text>
            {item.notice ? <Text>お知らせ: {item.notice}</Text> : null}
          </TouchableOpacity>
        )}
        ListEmptyComponent={<Text style={{ textAlign: 'center', color: '#aaa' }}>チャットルームがありません</Text>}
      />
      <TouchableOpacity onPress={() => setShowModal(true)}>
        <Text>＋</Text>
      </TouchableOpacity>
      <GroupChatRoomModal
        visible={showModal}
        onClose={() => setShowModal(false)}
        onCreated={fetchRooms}
      />
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\GroupChatRoomScreen.js =====
import React, { useEffect, useState, useRef } from 'react';
import { View, Text, TextInput, TouchableOpacity, FlatList, KeyboardAvoidingView, Alert } from 'react-native';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';

export default function GroupChatRoomScreen({ route }) {
  const { roomId } = route.params;
  const user = useAuthStore((state) => state.user);
  const [room, setRoom] = useState({});
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [notice, setNotice] = useState('');
  const flatListRef = useRef();

  useEffect(() => {
    fetchRoom();
    fetchMessages();
    const channel = supabase
      .channel('group_chat_messages:' + roomId)
      .on('postgres_changes',
        { event: '*', schema: 'public', table: 'group_chat_messages', filter: `room_id=eq.${roomId}` },
        fetchMessages
      ).subscribe();
    return () => { supabase.removeChannel(channel); }
  }, [roomId]);

  const fetchRoom = async () => {
    const { data } = await supabase
      .from('group_chat_rooms')
      .select('*')
      .eq('id', roomId)
      .single();
    if (data) {
      setRoom(data);
      setNotice(data.notice || '');
    }
  };

  const fetchMessages = async () => {
    const { data } = await supabase
      .from('group_chat_messages')
      .select('*')
      .eq('room_id', roomId)
      .order('created_at', { ascending: true });
    if (data) setMessages(data);
  };

  const sendMessage = async () => {
    if (input.trim()) {
      await supabase.from('group_chat_messages').insert({
        room_id: roomId, sender_id: user.id, content: input,
      });
      setInput('');
      setTimeout(() => flatListRef.current?.scrollToEnd({ animated: true }), 100);
    }
  };

  const isOwner = room.owner_id === user.id;
  const updateNotice = async () => {
    await supabase.from('group_chat_rooms').update({ notice }).eq('id', roomId);
    Alert.alert('お知らせの編集', 'お知らせが更新されました。');
    fetchRoom();
  };

  return (
    <KeyboardAvoidingView behavior="padding">
      <View>
        <Text>{room.name || 'チャットルーム'}</Text>
        <Text>{room.description}</Text>
        <View>
          <Text>お知らせ</Text>
          {isOwner ? (
            <View>
              <TextInput
                value={notice}
                onChangeText={setNotice}
                placeholder="お知らせを入力"
              />
              <TouchableOpacity onPress={updateNotice}>
                <Text>お知らせを編集</Text>
              </TouchableOpacity>
            </View>
          ) : (
            <Text>{room.notice || '(お知らせなし)'}</Text>
          )}
        </View>
        <FlatList
          ref={flatListRef}
          data={messages}
          keyExtractor={item => item.id}
          renderItem={({ item }) => (
            <View style={{
              alignSelf: item.sender_id === user.id ? 'flex-end' : 'flex-start',
            }}>
              <Text>{item.content}</Text>
              <Text style={{ fontSize: 10 }}>{item.created_at?.slice(11,16)}</Text>
            </View>
          )}
        />
        <View style={{ flexDirection: 'row' }}>
          <TextInput
            style={{ flex: 1 }}
            value={input}
            onChangeText={setInput}
            placeholder="メッセージを入力"
          />
          <TouchableOpacity onPress={sendMessage}>
            <Text>送信</Text>
          </TouchableOpacity>
        </View>
      </View>
    </KeyboardAvoidingView>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\PrivateChatRoomScreen.js =====
import React, { useEffect, useState, useRef } from 'react';
import { View, Text, TextInput, TouchableOpacity, FlatList, KeyboardAvoidingView } from 'react-native';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';

export default function PrivateChatRoomScreen({ route }) {
  const { roomId, otherUser } = route.params;
  const user = useAuthStore((state) => state.user);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const flatListRef = useRef();

  useEffect(() => {
    fetchMessages();
    const channel = supabase
      .channel('private_chat_messages:'+roomId)
      .on('postgres_changes',
        { event: '*', schema: 'public', table: 'private_chat_messages', filter: `room_id=eq.${roomId}` },
        fetchMessages
      ).subscribe();
    return () => { supabase.removeChannel(channel); }
  }, [roomId]);

  const fetchMessages = async () => {
    const { data } = await supabase
      .from('private_chat_messages')
      .select('*')
      .eq('room_id', roomId)
      .order('created_at', { ascending: true });
    if (data) setMessages(data);
  };

  const sendMessage = async () => {
    if (input.trim()) {
      await supabase.from('private_chat_messages').insert({
        room_id: roomId, sender_id: user.id, content: input,
      });
      setInput('');
      setTimeout(() => flatListRef.current?.scrollToEnd({ animated: true }), 100);
    }
  };

  return (
    <KeyboardAvoidingView behavior="padding">
      <View>
        <Text>{otherUser?.nickname || '相手'}</Text>
        <FlatList
          ref={flatListRef}
          data={messages}
          keyExtractor={item => item.id}
          renderItem={({ item }) => (
            <View style={{
              alignSelf: item.sender_id === user.id ? 'flex-end' : 'flex-start',
            }}>
              <Text>{item.content}</Text>
              <Text style={{ fontSize: 10 }}>{item.created_at?.slice(11,16)}</Text>
            </View>
          )}
        />
        <View style={{ flexDirection: 'row' }}>
          <TextInput
            style={{ flex: 1 }}
            value={input}
            onChangeText={setInput}
            placeholder="メッセージを入力"
          />
          <TouchableOpacity onPress={sendMessage}>
            <Text>送信</Text>
          </TouchableOpacity>
        </View>
      </View>
    </KeyboardAvoidingView>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\SearchResultsScreen.js =====
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
} from 'react-native';
import { supabase } from '../api/supabaseClient';
import BackFAB from '../components/ui/BackFAB';
import UserFilterBar from '../components/forms/UserFilterBar';

export default function SearchResultsScreen({ route, navigation }) {
  const { keyword, category } = route.params;
  const [results, setResults] = useState([]);
  const [sortBy, setSortBy] = useState('name');
  const [region, setRegion] = useState('すべて');
  const [minAge, setMinAge] = useState(null);
  const [maxAge, setMaxAge] = useState(null);
  const [partFilter, setPartFilter] = useState(null);

  useEffect(() => {
    fetchResults();
  }, [keyword, category, sortBy, region, minAge, maxAge, partFilter]);

  const fetchResults = async () => {
    let query;
    if (category === 'ユーザー') {
      query = supabase
        .from('users')
        .select('*')
        .ilike('nickname', `%${keyword}%`);
      if (region !== 'すべて') query = query.eq('region', region);
      if (minAge && maxAge)
        query = query
          .gte('birth_year', 2025 - maxAge)
          .lte('birth_year', 2025 - minAge);
      if (partFilter) query = query.contains('parts', [partFilter]);
      if (sortBy === 'likes') query.order('like_count', { ascending: false });
      else query.order('nickname');
    } else {
      const table = category === 'バンド' ? 'band_posts' : 'session_posts';
      query = supabase.from(table).select('*').ilike('title', `%${keyword}%`);
      query.order('created_at', { ascending: false });
    }
    const { data } = await query;
    setResults(data || []);
  };

  const renderItem = ({ item }) => (
    <TouchableOpacity>
      <Text>{item.nickname || item.title}</Text>
    </TouchableOpacity>
  );

  return (
    <View>
      <Text>
        「{keyword}」の{category}検索結果（{results.length}件）
      </Text>
      {category === 'ユーザー' && (
        <UserFilterBar
          sortBy={sortBy}
          setSortBy={setSortBy}
          region={region}
          setRegion={setRegion}
          minAge={minAge}
          maxAge={maxAge}
          setMinAge={setMinAge}
          setMaxAge={setMaxAge}
          partFilter={partFilter}
          setPartFilter={setPartFilter}
        />
      )}
      <FlatList
        data={results}
        keyExtractor={(item) => item.id.toString()}
        renderItem={renderItem}
      />
      <BackFAB onPress={() => navigation.goBack()} />
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\SessionDetailScreen.js =====
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  ScrollView,
  Alert,
} from 'react-native';
import { format } from 'date-fns';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';
import SessionPostModal from '../modals/SessionPostModal';
import BackFAB from '../components/ui/BackFAB';
import LikeButton from '../components/ui/LikeButton';
import CommentList from '../components/forms/CommentList';
import UserMiniModal from '../modals/UserMiniModal';

export default function SessionDetailScreen({ route, navigation }) {
  const { post } = route.params;
  const currentUser = useAuthStore((state) => state.user);
  const [profile, setProfile] = useState(null);
  const [authorFull, setAuthorFull] = useState(null);
  const [editModal, setEditModal] = useState(false);
  const [miniModal, setMiniModal] = useState(false);

  useEffect(() => {
    fetchAuthorProfile();
  }, []);

  const fetchAuthorProfile = async () => {
    const { data } = await supabase
      .from('users')
      .select('id, nickname, avatar_url, region, parts')
      .eq('id', post.user_id)
      .single();
    if (data) {
      setProfile({ nickname: data.nickname, avatar_url: data.avatar_url });
      setAuthorFull(data);
    }
  };

  const handleChat = async () => {
    if (!authorFull) return;
    const [user1_id, user2_id] =
      currentUser.id < authorFull.id
        ? [currentUser.id, authorFull.id]
        : [authorFull.id, currentUser.id];
    let { data: rooms } = await supabase
      .from('private_chat_rooms')
      .select('*')
      .eq('user1_id', user1_id)
      .eq('user2_id', user2_id);
    let roomId;
    if (rooms && rooms.length > 0) {
      roomId = rooms[0].id;
    } else {
      const { data, error } = await supabase
        .from('private_chat_rooms')
        .insert([{ user1_id, user2_id }])
        .select();
      roomId = data?.[0]?.id;
    }
    setMiniModal(false);
    if (roomId) {
      navigation.navigate('PrivateChatRoom', { roomId, otherUser: authorFull });
    }
  };

  const handleDeletePost = async () => {
    Alert.alert('削除確認', 'この投稿を削除しますか？', [
      { text: 'キャンセル' },
      {
        text: '削除',
        style: 'destructive',
        onPress: async () => {
          const { error } = await supabase
            .from('session_posts')
            .delete()
            .eq('id', post.id);
          if (!error) {
            Alert.alert('削除されました');
            navigation.goBack();
          }
        },
      },
    ]);
  };

  const renderTagList = (emoji, label, list = []) => (
    <View>
      <Text>
        {emoji} {label}
      </Text>
      <View>
        {(list?.length > 0 ? list : ['-']).map((item, idx) => (
          <Text key={idx}>
            {item}
          </Text>
        ))}
      </View>
      <View />
    </View>
  );

  const renderAgeRange = () => (
    <View>
      <Text>🎂 募集年齢</Text>
      <Text>
        {post.age_range ? post.age_range.replace('~', '〜') + ' 歳' : '全年齢'}
      </Text>
      <View />
    </View>
  );

  const renderBeginnerOk = () => (
    <View>
      <Text>🐣 初心者OK</Text>
      <View>
        <View />
        <Text>{post.is_beginner_ok ? '' : ''}</Text>
      </View>
      <View />
    </View>
  );

  return (
    <View>
      <ScrollView>
        <View>
          <View>
            <View>
              <Text>
                「{post.region || 'こだわらない'}」{post.title}
              </Text>
              <Text>
                投稿日:{' '}
                {post.created_at
                  ? format(new Date(post.created_at), 'yyyy/MM/dd')
                  : '日付不明'}
              </Text>
            </View>
            <View>
              {profile && (
                <>
                  <Image
                    source={{ uri: profile.avatar_url }}
                  />
                  <Text>{profile.nickname}</Text>
                </>
              )}
            </View>
          </View>
          <View />
          {renderTagList('🎸', 'パート', post.parts)}
          {renderTagList('🎼', 'ジャンル', post.genres)}
          {renderTagList('📅', '活動曜日', post.activity_days)}
          {renderTagList('📍', '方向性', post.directions)}
          {renderTagList('👥', '募集性別', post.gender ? [post.gender] : [])}
          {renderAgeRange()}
          {renderTagList('🔗', 'URL', post.demo_url ? [post.demo_url] : [])}
          {renderBeginnerOk()}
          <View>
            <LikeButton to_user_id={post.user_id} />
            {currentUser.id === post.user_id && (
              <View>
                <TouchableOpacity onPress={() => setEditModal(true)}>
                  <Text>✏️ 編集</Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={handleDeletePost}>
                  <Text>🗑 削除</Text>
                </TouchableOpacity>
              </View>
            )}
          </View>
        </View>
        <CommentList to_user_id={post.user_id} />
      </ScrollView>
      <BackFAB />
      <UserMiniModal
        visible={miniModal}
        user={authorFull}
        onClose={() => setMiniModal(false)}
        onViewProfile={() => {
          setMiniModal(false);
          global.openProfileViewModal?.(authorFull);
        }}
        onChat={handleChat}
      />
      <SessionPostModal
        visible={editModal}
        mode="edit"
        initialData={post}
        onClose={() => setEditModal(false)}
        onPostCreated={() => setEditModal(false)}
      />
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\SessionListScreen.js =====
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
} from 'react-native';
import { supabase } from '../api/supabaseClient';
import { format } from 'date-fns';
import SessionPostModal from '../modals/SessionPostModal';
import { useAuthStore } from '../store/useAuthStore';
import { useNavigation } from '@react-navigation/native';

export default function SessionListScreen() {
  const [posts, setPosts] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const user = useAuthStore((state) => state.user);
  const navigation = useNavigation();

  useEffect(() => {
    fetchPosts();
  }, []);

  const fetchPosts = async () => {
    const { data } = await supabase
      .from('session_posts')
      .select('*')
      .order('created_at', { ascending: false });
    if (data) setPosts(data);
  };

  return (
    <View>
      <FlatList
        data={posts}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity
            onPress={() => navigation.navigate('SessionDetail', { post: item })}
          >
            <Text>{item.title}</Text>
            <Text>
              {item.region}・{format(new Date(item.created_at), 'yyyy/M/d')}
            </Text>
          </TouchableOpacity>
        )}
      />
      <TouchableOpacity onPress={() => setShowModal(true)}>
        <Text>＋</Text>
      </TouchableOpacity>
      <SessionPostModal
        visible={showModal}
        onClose={() => setShowModal(false)}
        onPostCreated={fetchPosts}
      />
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\SettingsScreen.js =====
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  Alert,
  ScrollView,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { useAuthStore } from '../store/useAuthStore';
import { supabase } from '../api/supabaseClient';
import OnboardingModal from '../modals/OnboardingModal';
import Button from '../components/ui/Button';
import SectionTitle from '../components/ui/SectionTitle';
import ProfileImage from '../components/ui/ProfileImage';

export default function SettingsScreen() {
  const navigation = useNavigation();
  const user = useAuthStore((state) => state.user);
  const [profile, setProfile] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [editProfileData, setEditProfileData] = useState({});

  useEffect(() => {
    fetchProfile();
  }, []);

  const fetchProfile = async () => {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', user.id)
      .single();
    if (error) {
      Alert.alert('エラー', 'プロフィールの取得に失敗しました');
    } else {
      setProfile(data);
    }
  };

  const goToViewProfile = () => {
    if (profile) {
      global.openProfileViewModal(profile);
    }
  };

  const goToEditProfile = () => {
    if (profile) {
      setEditProfileData(profile);
      setModalVisible(true);
    }
  };

  const handleLogout = async () => {
    const { error } = await supabase.auth.signOut();
    if (error) {
      Alert.alert('ログアウト失敗', error.message);
    } else {
      Alert.alert('ログアウトしました');
    }
  };

  return (
    <ScrollView>
      <SectionTitle title="プロフィール設定" />

      <OnboardingModal
        visible={modalVisible}
        onClose={async () => {
          setModalVisible(false);
          setTimeout(fetchProfile, 500);
        }}
        initialProfile={editProfileData}
        mode="edit"
      />

      <View>
        <ProfileImage uri={profile?.avatar_url} size={80} />
        <Text>{profile?.nickname || 'ユーザー'}</Text>
        <View>
          <Button
            title="プロフィール確認"
            onPress={goToViewProfile}
            type="ghost"
          />
          <Button
            title="プロフィール変更"
            onPress={goToEditProfile}
            type="ghost"
          />
        </View>
      </View>

      <Button title="広告削除・サポート" />
      <Button title="プライバシー・ポリシー" />
      <Button title="🚪 ログアウト" onPress={handleLogout} />
      <Button title="アカウント削除" />
    </ScrollView>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\SignInScreen.js =====
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  Alert,
  TouchableOpacity,
  Animated,
} from 'react-native';
import { signIn } from '../api/auth';
import { useAuthStore } from '../store/useAuthStore';
import { supabase } from '../api/supabaseClient';
import Button from '../components/ui/Button';
import SectionTitle from '../components/ui/SectionTitle';

export default function SignInScreen({ navigation }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [fadeAnim] = useState(new Animated.Value(0));

  const handleLogin = async () => {
    const { data, error } = await signIn(email, password);
    if (error) {
      Alert.alert('ログイン失敗', error.message);
      return;
    }

    const user = data.user;
    if (!user) {
      Alert.alert('失敗', 'ユーザー情報が取得できませんでした');
      return;
    }

    const isEmailConfirmed =
      user.email_confirmed || user.email_confirmed_at || false;

    if (!isEmailConfirmed) {
      Alert.alert(
        'メール未確認',
        'メールアドレスの確認が必要です。メールをご確認ください。',
      );
      return;
    }

    useAuthStore.getState().setUser(user);

    const { data: existingUser, error: fetchError } = await supabase
      .from('users')
      .select('*')
      .eq('id', user.id)
      .single();

    if (fetchError) {
      const { error: insertError } = await supabase.from('users').upsert({
        id: user.id,
        email: user.email,
      });

      if (insertError) {
        Alert.alert('プロファイル作成失敗', insertError.message);
        return;
      }

      navigation.replace('Main');
      return;
    }

    navigation.replace('Main');
  };

  React.useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 500,
      useNativeDriver: true,
    }).start();
  }, []);

  return (
    <Animated.View style={{ opacity: fadeAnim }}>
      <SectionTitle title="ログイン" />

      <Text>メールアドレス</Text>
      <TextInput
        value={email}
        onChangeText={setEmail}
        autoCapitalize="none"
        placeholder="example@email.com"
      />

      <Text>パスワード</Text>
      <TextInput
        value={password}
        onChangeText={setPassword}
        secureTextEntry
        placeholder="••••••••"
      />

      <Button title="ログイン" onPress={handleLogin} />

      <TouchableOpacity onPress={() => navigation.navigate('SignUp')}>
        <Text>アカウントがありませんか？ 新規登録</Text>
      </TouchableOpacity>
    </Animated.View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\SignUpScreen.js =====
import React, { useState, useRef, useEffect } from 'react';
import {
  Text,
  TextInput,
  Alert,
  TouchableOpacity,
  Animated,
} from 'react-native';
import { signUp } from '../api/auth';
import { supabase } from '../api/supabaseClient';
import { useAuthStore } from '../store/useAuthStore';
import { useNavigation } from '@react-navigation/native';
import SectionTitle from '../components/ui/SectionTitle';
import Button from '../components/ui/Button';

export default function SignUpScreen() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigation = useNavigation();
  const fadeAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 800,
      useNativeDriver: true,
    }).start();
  }, []);

  const handleSignUp = async () => {
    const { data, error } = await signUp(email, password);

    if (error) {
      if (error.message.includes('User already registered')) {
        Alert.alert(
          '登録済み',
          'このメールアドレスは既に登録されています。ログインしてください。',
        );
        navigation.replace('SignIn');
        return;
      }
      Alert.alert('登録失敗', error.message);
      return;
    }

    const user = data?.user;
    if (!user || !user.email_confirmed_at) {
      Alert.alert('仮登録完了', '確認メールをご確認ください。');
      navigation.replace('SignIn');
      return;
    }

    useAuthStore.getState().setUser(user);
    const { error: upsertError } = await supabase.from('users').upsert({
      id: user.id,
      email: user.email,
    });

    if (upsertError) {
      Alert.alert('プロフィール保存失敗', upsertError.message);
    } else {
      Alert.alert('ようこそ！', 'アカウントが作成されました。');
      navigation.replace('Main');
    }
  };

  return (
    <Animated.View style={{ opacity: fadeAnim }}>
      <SectionTitle title="新規登録" />

      <Text>メールアドレス</Text>
      <TextInput
        value={email}
        onChangeText={setEmail}
        autoCapitalize="none"
        placeholder="email@example.com"
        keyboardType="email-address"
      />

      <Text>パスワード</Text>
      <TextInput
        value={password}
        onChangeText={setPassword}
        secureTextEntry
        placeholder="••••••••"
      />

      <Button title="新規登録" onPress={handleSignUp} />

      <TouchableOpacity onPress={() => navigation.navigate('SignIn')}>
        <Text>アカウントをお持ちですか？ ログイン</Text>
      </TouchableOpacity>
    </Animated.View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\screens\StudioScreen.js =====
import React from 'react';
import { View, Text } from 'react-native';

export default function StudioScreen() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Studio</Text>
    </View>
  );
}


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\services\adService.js =====



===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\services\studioService.js =====



===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\services\twitterService.js =====



===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\store\useAuthStore.js =====
// src/store/useAuthStore.js
import { create } from 'zustand';

export const useAuthStore = create((set) => ({
  user: null,
  setUser: (user) => set({ user }),
  clearUser: () => set({ user: null }),
}));


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\styles\colors.js =====
// 일본 밴드/음악 커뮤니티 감성, 입체감, 밝고 활기찬 느낌 반영
export const COLORS = {
  primary: "#2463EB",         // 메인 블루 (일본 음악앱에 자주 사용)
  secondary: "#FFB300",       // 포인트 옐로우 (활기찬 느낌)
  accent: "#F94F4F",          // 강조 레드 (알림, 에러, 좋아요)
  background: "#F8FAFF",      // 밝은 배경색 (입체감 효과 배경)
  surface: "#FFFFFF",         // 카드/컨텐츠 배경
  border: "#E3E9F5",          // 경계선/구분선
  shadow: "#CFD8DC",          // 그림자
  text: "#24324B",            // 기본 텍스트
  textMuted: "#7B8CA3",       // 보조 텍스트
  inputBg: "#F4F7FC",         // 입력창 배경
  inputBorder: "#D3D9E3",     // 입력창 테두리
  success: "#22B573",         // 성공 메시지
  error: "#F94F4F",           // 에러 메시지
  like: "#F94F4F",            // 좋아요 버튼
  tagBg: "#E6EEF7",           // 태그/텍스트칩 배경
  tagText: "#2463EB",         // 태그 텍스트
};


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\styles\common.js =====
import { StyleSheet } from "react-native";
import { COLORS } from "./colors";
import { FONTS } from "./fonts";
import { SPACING } from "./spacing";
import { METRICS } from "./metrics";

/**
 * 공통 스타일: 밴드 매칭 커뮤니티 / 일본인 사용자 / 입체감
 * - 카드, 버튼, 입력창, 태그, FAB, 코멘트 등
 * - 모든 컴포넌트에서 기본적으로 import해서 사용
 */
export const commonStyles = StyleSheet.create({
  // 컨테이너
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
    padding: SPACING.lg,
  },

  // 카드
  card: {
    backgroundColor: COLORS.surface,
    borderRadius: METRICS.borderRadius,
    padding: SPACING.lg,
    marginVertical: SPACING.sm,
    ...METRICS.cardShadow,
  },

  // 섹션 타이틀
  sectionTitle: {
    fontSize: FONTS.size.lg,
    fontWeight: FONTS.weight.bold,
    color: COLORS.primary,
    marginBottom: SPACING.sm,
    letterSpacing: 1.2,
  },

  // 일반 라벨/필드 타이틀
  label: {
    fontSize: FONTS.size.sm,
    color: COLORS.textMuted,
    marginBottom: SPACING.xs,
    fontWeight: FONTS.weight.medium,
  },

  // 입력창 (TextInput)
  input: {
    backgroundColor: COLORS.inputBg,
    borderColor: COLORS.inputBorder,
    borderWidth: 1,
    borderRadius: METRICS.inputRadius,
    paddingVertical: SPACING.sm,
    paddingHorizontal: SPACING.md,
    fontSize: FONTS.size.md,
    marginBottom: SPACING.md,
    color: COLORS.text,
  },

  // 버튼
  button: {
    backgroundColor: COLORS.primary,
    borderRadius: METRICS.buttonRadius,
    paddingVertical: SPACING.sm,
    paddingHorizontal: SPACING.xl,
    alignItems: "center",
    marginVertical: SPACING.sm,
    shadowColor: COLORS.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.12,
    shadowRadius: 6,
    elevation: 3,
  },
  buttonText: {
    color: "#fff",
    fontWeight: FONTS.weight.bold,
    fontSize: FONTS.size.md,
    letterSpacing: 1.1,
  },
  buttonSelected: {
    backgroundColor: COLORS.secondary,
  },

  // FAB (Floating Action Button)
  fab: {
    position: 'absolute',
    bottom: SPACING.xl,
    left: SPACING.lg,
    backgroundColor: COLORS.primary,
    borderRadius: 24,
    paddingVertical: SPACING.sm,
    paddingHorizontal: SPACING.lg,
    elevation: 5,
    ...METRICS.cardShadow,
  },
  fabText: {
    color: "#fff",
    fontWeight: FONTS.weight.bold,
    fontSize: FONTS.size.md,
  },

  // 체크박스 그룹
  formGroup: {
    marginBottom: SPACING.md,
  },
  row: {
    flexDirection: "row",
    alignItems: "center",
    flexWrap: "wrap",
    marginBottom: SPACING.sm,
  },
  checkBox: {
    borderWidth: 1,
    borderColor: COLORS.inputBorder,
    backgroundColor: COLORS.inputBg,
    borderRadius: 16,
    paddingVertical: SPACING.xs,
    paddingHorizontal: SPACING.sm,
    marginRight: SPACING.xs,
    marginBottom: SPACING.xs,
  },
  checkBoxSelected: {
    backgroundColor: COLORS.primary,
    borderColor: COLORS.primary,
  },
  checkBoxText: {
    color: COLORS.textMuted,
    fontSize: FONTS.size.sm,
  },
  checkBoxTextSelected: {
    color: "#fff",
    fontWeight: FONTS.weight.bold,
  },

  // 드롭다운(Picker) 래퍼
  dropdownWrapper: {
    backgroundColor: COLORS.inputBg,
    borderRadius: METRICS.inputRadius,
    borderWidth: 1,
    borderColor: COLORS.inputBorder,
    marginBottom: SPACING.md,
    justifyContent: "center",
  },
  picker: {
    width: "100%",
    height: 40,
    color: COLORS.text,
  },

  // Like Button
  likeButton: {
    backgroundColor: COLORS.tagBg,
    borderRadius: 20,
    paddingHorizontal: SPACING.lg,
    paddingVertical: SPACING.xs,
    alignItems: "center",
    alignSelf: "flex-start",
    marginVertical: SPACING.xs,
  },
  likeButtonActive: {
    backgroundColor: COLORS.like,
  },
  likeButtonText: {
    color: COLORS.like,
    fontWeight: FONTS.weight.bold,
    fontSize: FONTS.size.md,
  },

  // 코멘트 아이템
  commentItem: {
    flexDirection: "row",
    alignItems: "flex-start",
    marginBottom: SPACING.md,
  },
  commentAvatar: {
    width: 36,
    height: 36,
    borderRadius: 18,
    marginRight: SPACING.sm,
    backgroundColor: COLORS.inputBg,
  },
  commentNickname: {
    fontWeight: FONTS.weight.bold,
    fontSize: FONTS.size.sm,
    color: COLORS.primary,
  },
  commentContent: {
    color: COLORS.text,
    marginVertical: 2,
    fontSize: FONTS.size.md,
  },
  commentDate: {
    fontSize: FONTS.size.xs,
    color: COLORS.textMuted,
  },

  // 프로필 이미지
  profileImage: {
    backgroundColor: COLORS.surface,
    borderWidth: 2,
    borderColor: COLORS.primary,
    justifyContent: "center",
    alignItems: "center",
    marginRight: SPACING.sm,
  },
  profileImagePlaceholder: {
    color: COLORS.textMuted,
    fontSize: FONTS.size.md,
  },

  // 프로필 아이템
  profileItem: {
    marginBottom: SPACING.md,
  },
  profileValueWrapper: {
    backgroundColor: COLORS.inputBg,
    borderRadius: METRICS.inputRadius,
    padding: SPACING.sm,
  },
  profileValue: {
    fontSize: FONTS.size.md,
    color: COLORS.text,
  },

  // 태그 (ReadOnlyTagGroup 등)
  readOnlyTagGroup: {
    marginBottom: SPACING.sm,
  },
  tag: {
    backgroundColor: COLORS.tagBg,
    borderRadius: 16,
    paddingHorizontal: SPACING.sm,
    paddingVertical: SPACING.xs,
    marginRight: SPACING.xs,
    marginBottom: SPACING.xs,
    alignSelf: "flex-start",
  },
  tagText: {
    color: COLORS.tagText,
    fontSize: FONTS.size.sm,
  },

  // muted/보조 텍스트
  textMuted: {
    color: COLORS.textMuted,
    fontSize: FONTS.size.sm,
  },

  // 에러 텍스트
  errorText: {
    color: COLORS.error,
    marginTop: SPACING.xs,
    fontSize: FONTS.size.sm,
  },
});


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\styles\fonts.js =====
// 일본 커뮤니티 앱에서 자주 쓰는 폰트와 사이즈
export const FONTS = {
  family: {
    regular: "System",        // 기본 RN 폰트, 일본어 지원
    bold: "System",           // 필요시 Noto Sans JP, Hiragino 등 Web Font 적용도 고려
  },
  size: {
    xs: 12,
    sm: 14,
    md: 16,
    lg: 20,
    xl: 28,
    title: 32,                // 메인 타이틀
  },
  weight: {
    regular: "400",
    medium: "500",
    bold: "700",
  },
};


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\styles\metrics.js =====


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\styles\spacing.js =====
// 일본 앱 특유의 넉넉한 여백, 가독성 강조
export const SPACING = {
  xxs: 4,
  xs: 8,
  sm: 12,
  md: 16,
  lg: 24,
  xl: 32,
  xxl: 48,
};


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\utils\formatter.js =====


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\utils\notifications.js =====
// src/utils/notifications.js
export const getNotificationMessage = (type, nickname = '誰か') => {
  switch (type) {
    case 'like':
      return `${nickname}さんがあなたに「いいね」しました！`;
    case 'comment':
      return `${nickname}さんがコメントを残しました`;
    default:
      return '新しい通知があります';
  }
};


===== C:\Users\so0002\Downloads\tactless-yellow-tortillas\tactless-yellow-tortillas\src\utils\validate.js =====


